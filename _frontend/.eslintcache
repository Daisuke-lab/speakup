[{"C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\index.js":"1","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\App.js":"2","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\store\\reducers\\index.js":"3","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Authentication\\Home.js":"4","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Authentication\\Activate.js":"5","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\store\\actions\\auth_action.js":"6","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Authentication\\Signup.js":"7","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Authentication\\Login.js":"8","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Authentication\\PasswordReset.js":"9","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Authentication\\PasswordResetConfirm.js":"10","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Swipe\\Match.js":"11","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Swipe\\Cards.js":"12","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Setting\\Editor.js":"13","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Setting\\DeleteImageModal.js":"14","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Setting\\Setting.js":"15","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Chat\\Chat.js":"16","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Chat\\ChatPanels.js":"17","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\store\\reducers\\contact_reducer.js":"18","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\store\\reducers\\swipe_reducer.js":"19","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\store\\reducers\\profile_reducer.js":"20","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\store\\reducers\\auth_reducer.js":"21","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\store\\reducers\\chat_reducer.js":"22","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\store\\reducers\\image_reducer.js":"23","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Chat\\WebSocket.js":"24","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\store\\actions\\profile_action.js":"25","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\store\\actions\\actionType.js":"26","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\store\\actions\\swipe_action.js":"27","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\store\\actions\\contact_action.js":"28","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Swipe\\MatchedCard.js":"29","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\store\\actions\\image_action.js":"30","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\store\\actions\\chat_action.js":"31","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Swipe\\Card.js":"32","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Setting\\ImagesBox.js":"33","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Swipe\\Footer.js":"34","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Swipe\\Header.js":"35","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Chat\\ChatPanel.js":"36","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Chat\\FriendProfile.js":"37","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Chat\\MessageHandler.js":"38","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Chat\\TimeHandler.js":"39","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Setting\\Profile.js":"40","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Chat\\FriendCard.js":"41","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Setting\\Crop.js":"42","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Video\\Video.js":"43","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Video\\connection2.js":"44"},{"size":723,"mtime":1609849545453,"results":"45","hashOfConfig":"46"},{"size":2378,"mtime":1612620194253,"results":"47","hashOfConfig":"46"},{"size":473,"mtime":1609849545489,"results":"48","hashOfConfig":"46"},{"size":4341,"mtime":1618114373306,"results":"49","hashOfConfig":"46"},{"size":1341,"mtime":1609849545231,"results":"50","hashOfConfig":"46"},{"size":8248,"mtime":1618181164169,"results":"51","hashOfConfig":"46"},{"size":6515,"mtime":1610019570067,"results":"52","hashOfConfig":"46"},{"size":4781,"mtime":1618113886342,"results":"53","hashOfConfig":"46"},{"size":1998,"mtime":1609849545242,"results":"54","hashOfConfig":"46"},{"size":2949,"mtime":1609849545244,"results":"55","hashOfConfig":"46"},{"size":1411,"mtime":1613882628024,"results":"56","hashOfConfig":"46"},{"size":4961,"mtime":1618182148728,"results":"57","hashOfConfig":"46"},{"size":7719,"mtime":1616313576069,"results":"58","hashOfConfig":"46"},{"size":2663,"mtime":1609849545274,"results":"59","hashOfConfig":"46"},{"size":2085,"mtime":1618182291955,"results":"60","hashOfConfig":"46"},{"size":12248,"mtime":1616326379401,"results":"61","hashOfConfig":"46"},{"size":1553,"mtime":1616316779313,"results":"62","hashOfConfig":"46"},{"size":1137,"mtime":1618181267516,"results":"63","hashOfConfig":"46"},{"size":2175,"mtime":1618181322967,"results":"64","hashOfConfig":"46"},{"size":4855,"mtime":1618181305896,"results":"65","hashOfConfig":"46"},{"size":3548,"mtime":1618181236348,"results":"66","hashOfConfig":"46"},{"size":2717,"mtime":1616202683515,"results":"67","hashOfConfig":"46"},{"size":1233,"mtime":1618181287057,"results":"68","hashOfConfig":"46"},{"size":3559,"mtime":1616460702906,"results":"69","hashOfConfig":"46"},{"size":3862,"mtime":1616315170731,"results":"70","hashOfConfig":"46"},{"size":4120,"mtime":1618181182592,"results":"71","hashOfConfig":"46"},{"size":3711,"mtime":1616311606719,"results":"72","hashOfConfig":"46"},{"size":3449,"mtime":1616311394931,"results":"73","hashOfConfig":"46"},{"size":6670,"mtime":1613883435662,"results":"74","hashOfConfig":"46"},{"size":2362,"mtime":1615259107142,"results":"75","hashOfConfig":"46"},{"size":3422,"mtime":1616203649469,"results":"76","hashOfConfig":"46"},{"size":5406,"mtime":1618181918173,"results":"77","hashOfConfig":"46"},{"size":5410,"mtime":1616312028819,"results":"78","hashOfConfig":"46"},{"size":767,"mtime":1609849545300,"results":"79","hashOfConfig":"46"},{"size":1290,"mtime":1609849545302,"results":"80","hashOfConfig":"46"},{"size":1842,"mtime":1613870365561,"results":"81","hashOfConfig":"46"},{"size":1590,"mtime":1613870460506,"results":"82","hashOfConfig":"46"},{"size":1210,"mtime":1616458979514,"results":"83","hashOfConfig":"46"},{"size":2802,"mtime":1613648082093,"results":"84","hashOfConfig":"46"},{"size":3228,"mtime":1613793416568,"results":"85","hashOfConfig":"46"},{"size":6209,"mtime":1616310391445,"results":"86","hashOfConfig":"46"},{"size":3705,"mtime":1616309408813,"results":"87","hashOfConfig":"46"},{"size":1070,"mtime":1613435297112,"results":"88","hashOfConfig":"46"},{"size":7693,"mtime":1616326279023,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"6h70gh",{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"92"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"92"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"92"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"92"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"92"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"92"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"92"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"92"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"92"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"92"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"92"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"92"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"92"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"92"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"92"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"92"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"92"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"92"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"92"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"92"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"92"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"195"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"92"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"92"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\index.js",[],["204","205"],"C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\App.js",[],"C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\store\\reducers\\index.js",[],"C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Authentication\\Home.js",["206"],"import React, {useEffect, useState}from 'react'\r\nimport { Link, Redirect } from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport image from '../assets/home_page4.jpg'\r\nimport SpaIcon from '@material-ui/icons/Spa';\r\nimport '../assets/Authentication/Home.css'\r\nimport { Default } from 'react-spinners-css';\r\nimport * as auth_actions from '../store/actions/auth_action'\r\nimport * as profile_actions from '../store/actions/profile_action'\r\nimport * as swipe_actions from '../store/actions/swipe_action'\r\nimport * as contact_actions from '../store/actions/contact_action'\r\nimport * as image_actions from '../store/actions/image_action'\r\nconst Home = (props) => {\r\n    var Background\r\n    const [count, setCount] = useState(0)\r\n    const [loading, setLoading] = useState(false)\r\n    if (window.innerWidth > 650) {\r\n        Background = {\r\n            width: '100%',\r\n            height: '800px',\r\n            backgroundSize: 'cover',\r\n            backgroundImage: `url(${image})`\r\n        }\r\n    } else {\r\n        Background = {\r\n            width: '100%',\r\n            height: '800px',\r\n            backgroundSize: 'cover',\r\n            backgroundColor: '#ec7878'\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        props.remove_error()\r\n        props.back_to_home()\r\n        console.log(process.env.REACT_APP_API_URL)\r\n    }, [])\r\n\r\n    const onSubmit = e => {\r\n        console.log('it is workiing')\r\n        e.preventDefault()\r\n        setLoading(true)\r\n        props.login('speakup.example@gmail.com', 'abc123xyz')\r\n    }\r\n    if (props.id && count===0) {\r\n        setCount(1)\r\n        // props.receive_profile(props.id)\r\n        // props.receive_swipe(props.id)\r\n        props.receive_contact(props.id)   \r\n    }\r\n    if (props.contact_id && count===1) {\r\n        setCount(2)\r\n        props.receive_swipe(props.id)\r\n    }\r\n\r\n    if (props.swipe_id && count===2) {\r\n        setCount(3)\r\n        props.receive_profile(props.id)\r\n    }\r\n\r\n    if (props.profile_id && count===3) {\r\n        setCount(4)\r\n        props.image_receive(props.profile_id)\r\n    }\r\n    \r\n  //props.contact_id && props.profile_id && props.swipe_id\r\n    if (props.images !== null) {\r\n        return <Redirect to='/swipe'/>\r\n    }\r\n\r\n    return (\r\n        <div style={Background} className='home'>\r\n            <div className='home_title'><SpaIcon id='home_logo'/><h1>Speak Up</h1></div>\r\n            <h1 className={window.innerWidth > 650?'home_intro':'home_intro2'}>\r\n                Find Your Language Exchange Partner!!</h1>\r\n            <Link to='/login'>\r\n            <button className='home_button1' onFocus=\"this.blur();\"><span>Sign In</span></button>\r\n            </Link>\r\n            <Link to='/signup'>\r\n            <button className='home_button2' onFocus=\"this.blur();\"><span>Sign Up</span></button>\r\n            </Link>\r\n            <button className='home_button3' onFocus=\"this.blur();\" onClick={onSubmit}><span>Demo</span></button>\r\n            <div style={{textAlign: 'center'}}>\r\n            {loading?\r\n            <Default color=\"aqua\"/>\r\n            :<></>\r\n                }\r\n        </div>\r\n        <p style={{color: \"yellow\", textAlign: 'center', fontSize:'25px'}}>{props.activation}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapstateToProps = state => {\r\n    return {\r\n        activation: state.auth_reducer.activation,\r\n        isAuthenticated: state.auth_reducer.isAuthenticated,\r\n        id: state.auth_reducer.id,\r\n        error: state.auth_reducer.error,\r\n        profile_id : state.profile_reducer.profile_id,\r\n        contact_id: state.contact_reducer.contact_id,\r\n        swipe_id: state.swipe_reducer.swipe_id,\r\n        images: state.image_reducer.images\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        login : (email, password) => dispatch(auth_actions.login(email, password)),\r\n        remove_error: () => dispatch(auth_actions.remove_error()),\r\n        back_to_home: () => dispatch(auth_actions.back_to_home()),\r\n        receive_profile : (id) => dispatch(profile_actions.Receive(id)),\r\n        receive_swipe: (id) => dispatch(swipe_actions.Receive(id)),\r\n        receive_contact: (id) => dispatch(contact_actions.Receive(id)),\r\n        image_receive: (profile_id) => dispatch(image_actions.image_receive(profile_id))\r\n    }\r\n}\r\n\r\nexport default connect(mapstateToProps, mapDispatchToProps)(Home)","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Authentication\\Activate.js",[],"C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\store\\actions\\auth_action.js",["207"],"import * as actionType from './actionType'\r\nimport axios from 'axios'\r\nexport const load_user = () => async dispatch => {\r\n    if (localStorage.getItem('access')) {\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `JWT ${localStorage.getItem('access')}`,\r\n                'Accept': 'application/json'\r\n            }\r\n        }\r\n        try {\r\n            // use shift and @ instead of shift and 7\r\n            const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config)\r\n            console.log('data in load::', res.data)\r\n            dispatch({\r\n                type: actionType.LOAD_USER_SUCCESS,\r\n                payload: res.data})\r\n        } catch (err) {\r\n            dispatch({\r\n                    type: actionType.LOAD_USER_FAIL,\r\n                    payload: err.reponse !== undefined?err.reponse.request.reponse:'error occured on auth load_user'})\r\n            }\r\n    } else {\r\n        dispatch({\r\n            type: actionType.LOAD_USER_FAIL,\r\n            payload: \"An error occured. Please try again\"})\r\n    }\r\n}\r\nexport const login = (email, password) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n\r\n    const body = JSON.stringify({email, password})\r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config)\r\n        console.log(res.data)\r\n        dispatch({\r\n            type: actionType.LOGIN_SUCCESS,\r\n            payload: res.data})\r\n\r\n        dispatch(load_user())\r\n    } catch (err) {\r\n        dispatch({\r\n            type: actionType.LOGIN_FAIL,\r\n            payload: \"Email or password is invalid.\"})\r\n        dispatch({\r\n            type: actionType.ERROR,\r\n            payload: \"Email or password is invalid.\"})\r\n    }\r\n}\r\n\r\nexport const checkAuthenticated = () => async dispatch => {\r\n    if (localStorage.getItem('access')) {\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            }\r\n        }\r\n        const body = JSON.stringify({ token: localStorage.getItem('access')})\r\n        try {\r\n            const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config)\r\n\r\n            if (res !== 'token_not_valid') {\r\n                dispatch({\r\n                    type: actionType.AUTHENTICATED_SUCCESS\r\n                })\r\n            } else {\r\n                dispatch({\r\n                    type: actionType.AUTEHNTICATED_FAIL})\r\n                dispatch({\r\n                    type: actionType.ERROR,\r\n                    payload:'Token is not valid' })\r\n        }\r\n            \r\n        } catch(err) {\r\n            dispatch({\r\n                type: actionType.AUTEHNTICATED_FAIL,\r\n            })\r\n            dispatch({\r\n                type: actionType.ERROR,\r\n                payload: err.reponse !== undefined?err.reponse.request.reponse:'error occured on auth checkAuthenticated'})\r\n            \r\n        }\r\n        \r\n    } else {\r\n        dispatch({\r\n            type: actionType.AUTEHNTICATED_FAIL,\r\n            payload: 'An error occured. Please try again'\r\n        })\r\n        dispatch({\r\n            type: actionType.ERROR,\r\n            payload: 'An error occured. Please try again'})\r\n    }\r\n}\r\n\r\nexport const logout = () => dispatch => {\r\n    dispatch({\r\n        type: actionType.LOG_OUT\r\n    })\r\n}\r\n\r\nexport const reset_password = (email) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n\r\n    const body = JSON.stringify({email})\r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`, body, config)\r\n        dispatch({\r\n            type: actionType.PASSWORD_RESET_SUCCESS,\r\n            payload: res.data})\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: actionType.PASSWORD_RESET_FAIL,\r\n            payload: err.reponse !== undefined?err.reponse.request.reponse:'error occured on auth reset_password'})\r\n        dispatch({\r\n            type: actionType.ERROR,\r\n            payload: err.reponse !== undefined?err.reponse.request.reponse:'error occured on auth reset_password'})\r\n    }\r\n}\r\n\r\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n\r\n    const body = JSON.stringify({uid, token, new_password, re_new_password})\r\n    try {\r\n        await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`, body, config)\r\n        dispatch({\r\n            type: actionType.PASSWORD_RESET_CONFIRM_SUCCESS})\r\n    } catch (err) {\r\n        dispatch({\r\n            type: actionType.PASSWORD_RESET_CONFIRM_FAIL,\r\n            payload: err.reponse !== undefined?err.reponse.request.reponse:'error occured on auth reset_password_confirm'})\r\n\r\n        dispatch({\r\n            type: actionType.ERROR,\r\n            payload: err.reponse !== undefined?err.reponse.request.reponse:'error occured on auth reset_password_confirm'})\r\n    }\r\n}\r\n\r\nexport const signup = (name, email, password, re_password) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n\r\n    const body = JSON.stringify({name, email, password, re_password})\r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/`, body, config)\r\n        //{name: \"lol\", email: \"jeorgia.zr@gmail.com\", id: 2}\r\n        dispatch({\r\n            type: actionType.SIGNUP_SUCCESS,\r\n            payload: res.data})\r\n        \r\n\r\n    } catch (err) {\r\n        console.log(err)\r\n        dispatch({\r\n            type: actionType.ERROR,\r\n            payload: err.reponse !== undefined?err.reponse.request.reponse:'error occured on auth signup'})\r\n        dispatch({\r\n            type: actionType.SIGNUP_FAIL,\r\n            payload: err.reponse !== undefined?err.reponse.request.reponse:'error occured on auth signup'})\r\n    }\r\n\r\n}\r\n\r\nexport const verify = (uid, token) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n\r\n    const body = JSON.stringify({uid, token})\r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config)\r\n        dispatch({\r\n            type: actionType.ACTIVATION_SUCCESS,\r\n            payload: res.data})\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: actionType.ACTIVATION_FAIL,\r\n            payload: err.reponse !== undefined?err.reponse.request.reponse:'error occured on auth verify'})\r\n\r\n        dispatch({\r\n            type: actionType.ERROR,\r\n            payload: err.reponse !== undefined?err.reponse.request.reponse:'error occured on auth verify'})\r\n        \r\n    }\r\n}\r\n\r\nexport const remove_error = () => dispatch => {\r\n    dispatch({\r\n        type: actionType.REMOVE_ERROR\r\n    })\r\n}\r\n\r\nexport const back_to_home = () => dispatch => {\r\n    dispatch({\r\n        type: actionType.BACK_TO_HOME\r\n    })\r\n}\r\n\r\nexport const delete_account = (id) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n\r\n    const body = JSON.stringify({id})\r\n\r\n    try {\r\n        const res = await axios.delete(`${process.env.REACT_APP_API_URL}/auth/users/${id}`, config)\r\n        //{name: \"lol\", email: \"jeorgia.zr@gmail.com\", id: 2}\r\n        dispatch({\r\n            type: actionType.DELETE_ACCOUNT_SUCCESS,\r\n            payload: res.data})\r\n        \r\n\r\n    } catch (err) {\r\n        console.log(err)\r\n        dispatch({\r\n            type: actionType.ERROR,\r\n            payload: err.reponse !== undefined?err.reponse.request.reponse:'error occured on auth delete_account'})\r\n        dispatch({\r\n            type: actionType.DELETE_ACCOUNT_FAIL,\r\n            payload: err.reponse !== undefined?err.reponse.request.reponse:'error occured on auth delete_account'})\r\n    }\r\n\r\n}","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Authentication\\Signup.js",["208","209","210","211"],"import React, { useState, useEffect}from 'react'\r\nimport {Link, Redirect } from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport * as auth_actions from '../store/actions/auth_action'\r\nimport * as profile_actions from '../store/actions/profile_action'\r\nimport * as swipe_actions from '../store/actions/swipe_action'\r\nimport * as contact_actions from '../store/actions/contact_action'\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport SpaIcon from '@material-ui/icons/Spa';\r\nimport { IconButton, requirePropFactory } from '@material-ui/core';\r\nimport '../assets/Authentication/Signup.css'\r\n// import Default from '@bit/joshk.react-spinners-css.default';\r\nimport { Default } from 'react-spinners-css';\r\n\r\nconst Signup = (props) => {\r\n    const [accountCreated, setAccountCreated] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n    const [count, setCount] = useState(0)\r\n    const [formData, setFormData] = useState({\r\n        name: '',\r\n        email:'',\r\n        password:'',\r\n        re_password: '',\r\n        native_lan: '',\r\n        foreign_lan: ''\r\n    })\r\n    useEffect(() => {\r\n        props.remove_error()\r\n    }, [])\r\n\r\n    const {name, email, password, re_password, native_lan, foreign_lan} = formData\r\n    const onChange = e => setFormData({...formData, [e.target.name]: e.target.value})\r\n    const onSubmit = e => {\r\n        e.preventDefault()\r\n        setLoading(true)\r\n        props.signup(name, email, password, re_password)\r\n        props.remove_error()\r\n        setAccountCreated(true)\r\n    }\r\n\r\n    const loading_handler = () => {\r\n        console.log('loading_handler')\r\n        if (props.error !== '' ) {\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n\r\n    if (props.id && props.isAuthenticated && count===0) {\r\n        setCount(1)\r\n        props.profile_create(props.id, name, native_lan, foreign_lan)\r\n    }\r\n\r\n    if (props.profile_id && count===1) {\r\n        setCount(2)\r\n        props.swipe_create(props.id)\r\n    }\r\n\r\n    if (props.swipe_id && count===2) {\r\n        setCount(3)\r\n        props.contact_create(props.id)\r\n    }\r\n\r\n    if (props.error !== '' && loading===true) {\r\n        setLoading(false)\r\n    }\r\n    \r\n    \r\n\r\n\r\n     \r\n\r\n    const languages = ['Arabic','Bengali','Burmese','Chinese','English','French','German','Gujarati','Hindi','Italian','Japanese','Kannada','Korean','Malayalam',\r\n'Marathi','Oriya','Panjabi','Persian','Polish','Portuguese','Russian','Spanish','Tamil','Telugu','Thai','Turkish','Ukrainian','Urdu','Vietnamese']\r\n    if (props.isAuthenticated && props.contact_id && count===3) {\r\n        return <Redirect to='/'/>\r\n    }\r\n    // if (props.id) {\r\n    //     return <Redirect to='/'/>\r\n    // }\r\n    return (\r\n    <div className='signup'>\r\n        <header className='signup_header'>\r\n            <Link to='/'>\r\n            <IconButton id='signup_back'>\r\n                <ArrowBackIosIcon/>\r\n            </IconButton>\r\n            </Link>\r\n            <div className='signup_title'><SpaIcon id='signup_logo'/><h1>Speak Up</h1></div>\r\n        </header>\r\n        <form onSubmit={e => onSubmit(e)}>\r\n            <div  className='signup_form'>\r\n            <div className='col signup_form1'>\r\n                <input className='signup_input' type='name' placeholder='Name*' name='name'\r\n                value={name} onChange={e => onChange(e)} required/>\r\n                <input className='signup_input' type='email'\r\n                placeholder='Email*' name='email' value={email} onChange={e => onChange(e)} required/>\r\n                <input className='signup_input' type='password' placeholder='Password*' name='password'\r\n                value={password} onChange={e => onChange(e)} required/>\r\n                <input className='signup_input' type='password' placeholder='Confirm Password*'\r\n                name='re_password' value={re_password} onChange={e => onChange(e)} required/>\r\n                </div>\r\n                <div className='col signup_form2'>\r\n                <div className='signup_lan'>\r\n                    What language are you fluent in?\r\n                <select className='signup_select' name='native_lan' required onChange={e => onChange(e)}>\r\n                    <option hidden>You speak ...</option>\r\n                    {languages.map((language) => {\r\n                        return <option value={language}>{language}</option>\r\n                    })}\r\n                </select>\r\n                </div>\r\n                <div className='signup_lan'>\r\n                    What do you want to learn?\r\n                <select className='signup_select' name='foreign_lan' required onChange={e => onChange(e)}>\r\n                    <option hidden>You want to learn ...</option>\r\n                    {languages.map((language) => {\r\n                        return <option value={language}>{language}</option>\r\n                    })}\r\n                </select>\r\n                </div>\r\n                </div>\r\n                </div>\r\n                <div className='signup_button'>\r\n                        <button  onFocus=\"this.blur();\" type='submit'><span>Sign Up</span></button>\r\n                </div>\r\n        </form>\r\n        <p style={{textAlign: 'center'}}>\r\n            Already have an account? <Link to='/login'>Log in</Link>\r\n        </p>\r\n        <p style={{color: \"red\", textAlign: 'center'}}>{props.error}</p>\r\n        <div style={{textAlign: 'center'}}>\r\n            {loading?\r\n            <Default color=\"palevioletred\"/>\r\n            :<></>\r\n                }\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapstateToProps = state => ({\r\n    isAuthenticated: state.auth_reducer.isAuthenticated,\r\n    id: state.auth_reducer.id,\r\n    profile_id : state.profile_reducer.profile_id,\r\n    contact_id: state.contact_reducer.contact_id,\r\n    swipe_id: state.swipe_reducer.swipe_id,\r\n    error: state.auth_reducer.error\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        signup : (name, email, password, re_password) => dispatch(auth_actions.signup(name, email, password, re_password)),\r\n        profile_create: (user, swipe, name, native_lan, foreign_lan) => dispatch(profile_actions.Create(user, swipe, name, native_lan, foreign_lan)),\r\n        swipe_create: (profile) => dispatch(swipe_actions.Create(profile)),\r\n        contact_create: (user) => dispatch(contact_actions.Create(user)),\r\n        remove_error: () => dispatch(auth_actions.remove_error())\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapstateToProps, mapDispatchToProps)(Signup)\r\n","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Authentication\\Login.js",["212","213"],"import React, { useState, useEffect, useRef }from 'react'\r\nimport {Link, Redirect } from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport SpaIcon from '@material-ui/icons/Spa';\r\nimport { IconButton } from '@material-ui/core';\r\nimport * as auth_actions from '../store/actions/auth_action'\r\nimport * as profile_actions from '../store/actions/profile_action'\r\nimport * as swipe_actions from '../store/actions/swipe_action'\r\nimport * as contact_actions from '../store/actions/contact_action'\r\nimport * as image_actions from '../store/actions/image_action'\r\nimport '../assets/Authentication/Login.css'\r\n// import Default from '@bit/joshk.react-spinners-css.default';\r\nimport { Default } from 'react-spinners-css';\r\nconst Login = (props) => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [count, setCount] = useState(0)\r\n    const [formData, setFormData] = useState({\r\n        email:'',\r\n        password:''\r\n    })\r\n    useEffect(() => {\r\n        props.remove_error()\r\n    }, [])\r\n    const {email, password} = formData\r\n    const onChange = e => setFormData({...formData, [e.target.name]: e.target.value})\r\n    const onSubmit = e => {\r\n        e.preventDefault()\r\n        setLoading(true)\r\n        props.login(email, password)\r\n        props.remove_error()\r\n        setCount(0)\r\n    }\r\n    //props.id && props.isAuthenticated\r\n    if (props.id && count===0) {\r\n        setCount(1)\r\n        // props.receive_profile(props.id)\r\n        // props.receive_swipe(props.id)\r\n        props.receive_contact(props.id)   \r\n    }\r\n    if (props.contact_id && count===1) {\r\n        setCount(2)\r\n        props.receive_swipe(props.id)\r\n    }\r\n\r\n    if (props.swipe_id && count===2) {\r\n        setCount(3)\r\n        props.receive_profile(props.id)\r\n    }\r\n\r\n    if (props.profile_id && count===3) {\r\n        setCount(4)\r\n        props.image_receive(props.profile_id)\r\n    }\r\n    if (props.error !== '' && loading===true) {\r\n        setLoading(false)\r\n    }\r\n    \r\n  //props.contact_id && props.profile_id && props.swipe_id\r\n    if (props.images !== null) {\r\n        return <Redirect to='/swipe'/>\r\n    }\r\n\r\n\r\n    return (\r\n    <div className='login'>\r\n        <header className='login_header'>\r\n            <Link to='/'>\r\n            <IconButton id='login_back'>\r\n                <ArrowBackIosIcon/>\r\n            </IconButton>\r\n            </Link>\r\n            <div className='login_title'><SpaIcon id='login_logo'/><h1>Speak Up</h1></div>\r\n        </header>\r\n        <div className='login_form'>\r\n        <form onSubmit={e => onSubmit(e)}>\r\n                <input \r\n                className='login_input'\r\n                type='email'\r\n                placeholder='Email'\r\n                name='email'\r\n                value={email}\r\n                onChange={e => onChange(e)}\r\n                required/>\r\n                <input \r\n                className='login_input'\r\n                type='password'\r\n                placeholder='Password'\r\n                name='password'\r\n                value={password}\r\n                onChange={e => onChange(e)}\r\n                required/>\r\n                <button className='login_button' type='submit'onfocus=\"this.blur();\"><span>Log In</span></button>\r\n        </form>\r\n        <p className='mt-3'>\r\n            Don't have an account? <Link to='/signup'>Sign up</Link>\r\n        </p>\r\n        <p className='mt-3'>\r\n            Forget your password? <Link to='/reset_password'>Reset Password</Link>\r\n        </p>\r\n        <p style={{color: \"red\", textAlign: 'center'}}>{props.error}</p>\r\n        </div>\r\n        <div style={{textAlign: 'center'}}>\r\n            {loading?\r\n            <Default color=\"aqua\"/>\r\n            :<></>\r\n                }\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nconst mapstateToProps = state => {\r\n    return {\r\n    isAuthenticated: state.auth_reducer.isAuthenticated,\r\n    id: state.auth_reducer.id,\r\n    error: state.auth_reducer.error,\r\n    profile_id : state.profile_reducer.profile_id,\r\n    contact_id: state.contact_reducer.contact_id,\r\n    swipe_id: state.swipe_reducer.swipe_id,\r\n    images: state.image_reducer.images\r\n\r\n}\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        login : (email, password) => dispatch(auth_actions.login(email, password)),\r\n        receive_profile : (id) => dispatch(profile_actions.Receive(id)),\r\n        receive_swipe: (id) => dispatch(swipe_actions.Receive(id)),\r\n        receive_contact: (id) => dispatch(contact_actions.Receive(id)),\r\n        remove_error: () => dispatch(auth_actions.remove_error()),\r\n        image_receive: (profile_id) => dispatch(image_actions.image_receive(profile_id))\r\n    }\r\n}\r\n\r\nexport default connect(mapstateToProps, mapDispatchToProps)(Login)","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Authentication\\PasswordReset.js",[],"C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Authentication\\PasswordResetConfirm.js",[],"C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Swipe\\Match.js",["214"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport MatchedCard from './MatchedCard'\r\nimport {connect} from 'react-redux'\r\nimport '../assets/Swipe/Match.css'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  modal: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  paper: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    //border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    //padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\n\r\n\r\nfunction Match(props) {\r\n  const classes = useStyles();\r\n  // const [open, setOpen] = React.useState(props.onOpen);\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        aria-labelledby=\"transition-modal-title\"\r\n        aria-describedby=\"transition-modal-description\"\r\n        className={classes.modal}\r\n        open={props.popup}\r\n        // onClose={handleClose}\r\n        closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 500,\r\n        }}>\r\n        <Fade in={props.popup}>\r\n          <div className={classes.paper}>\r\n          <MatchedCard data={props.person} onClose={props.onClose}/>\r\n          </div>\r\n        </Fade>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Match\r\n","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Swipe\\Cards.js",["215","216","217","218"],"import React, {useState, useEffect, useMemo} from 'react'\r\nimport axios from 'axios'\r\nimport {connect} from 'react-redux'\r\nimport TinderCard from 'react-tinder-card'\r\n// import Ripple from '@bit/joshk.react-spinners-css.ripple';\r\nimport { Ripple } from 'react-spinners-css';\r\nimport '../assets/Swipe/Cards.css'\r\nimport Header from './Header'\r\nimport Footer from './Footer'\r\nimport Match from './Match'\r\nimport Card from './Card'\r\nimport * as swipe_actions from '../store/actions/swipe_action'\r\nimport * as chat_actions from '../store/actions/chat_action'\r\nimport * as contact_actions from '../store/actions/contact_action'\r\n\r\n\r\n\r\n\r\nfunction Cards(props) {\r\n    \r\n    //useref\r\n    const [people, setPeople] = useState([]);\r\n    const [lastDirection, setLastDirection] = useState()\r\n    const [popup, setPopup] = useState(false)\r\n    const [matchedPerson, setMatchedPerson] = useState()\r\n    const [ripple, setRipple] = useState(true)\r\n    let alredyRemoved = []\r\n    let swiped_card = props.swiped\r\n\r\n\r\n\r\n    useEffect(() => {\r\n      props.card_receive()\r\n      props.receive_swipe(props.id)\r\n      setPeople(props.cards)\r\n    }, [])\r\n\r\n    let users = people\r\n    const childRefs = useMemo(() => people!= null? Array(people.length).fill(0).map(i => React.createRef(), []):null)\r\n  \r\n    const swiped = async (direction, person) => {\r\n      setLastDirection(direction)\r\n      alredyRemoved.push(person.name)\r\n      if (direction === 'right') {\r\n        props.Swipe(props.swipe_id, person.user, person.user)\r\n        const res = await axios.get(`${process.env.REACT_APP_API_URL}/swipe/detail/${person.user}/`)\r\n        console.log(JSON.stringify(res));\r\n        if (res.data.liked.includes(Number(props.id))) {\r\n          console.log('MATCH')\r\n          setMatchedPerson(person)\r\n          setPopup(true)\r\n          props.chat_create(props.id, person.user)\r\n          props.add_friend(props.id, person.user)\r\n\r\n          }\r\n\r\n      } else {\r\n        props.Swipe(props.swipe_id, person.user, null)\r\n      }\r\n    }\r\n\r\n    function onClose() {\r\n      setPopup(false)\r\n    }\r\n\r\n  \r\n    const outOfFrame = (name) => {\r\n      console.log(name + ' left the screen!')\r\n      users = users.filter(person => person.name !== name)\r\n      setPeople(users)\r\n    }\r\n    const swipe = (dir) => {\r\n      const cardsLeft = people.filter(person => !alredyRemoved.includes(person.name))\r\n      if (cardsLeft.length) {\r\n        const toBeRemoved = cardsLeft[cardsLeft.length - 1]\r\n        const index = people.map(person => person.name).indexOf(toBeRemoved.name)\r\n        // alredyRemoved.push(toBeRemoved) \r\n        childRefs[index].current.swipe(dir)\r\n        swiped(dir, toBeRemoved)\r\n      }\r\n    }\r\n    if (props.swiped !== null && props.swiped !== undefined) {\r\n      if (props.swiped.length > 0) {\r\n        alredyRemoved = [...props.swiped]\r\n      }\r\n  }\r\n\r\n  if (Number(props.id) === 5) {\r\n    console.log('it is working')\r\n    swiped_card = []\r\n  }\r\n\r\n\r\n  //&& props.swiped != null&& people.length>0\r\n\r\n\r\n  return (\r\n      <div>\r\n      <Header/>\r\n    <div className=\"cards\">\r\n      {people !== null&& props.swiped != null&& people.length>0? people.map((person, index) => {\r\n        if (person.user === props.id || swiped_card.includes(person.user)===true) { \r\n          return (<></>)\r\n        } else { \r\n        return ( <>\r\n          <TinderCard\r\n          ref={childRefs[index]} className='swipe' \r\n          key={person.name} onSwipe={(dir) => swiped(dir, person)}\r\n          onCardLeftScreen={() => outOfFrame(person.name)}\r\n          preventSwipe={['up', 'down']}>\r\n            <Card data={person}/>\r\n          </TinderCard>\r\n          </>)\r\n         }      \r\n      }):<></>\r\n      }\r\n      <div style={{marginLeft: '15px',     marginTop: '100px', textAlign:'center'}}>\r\n      {ripple? <><Ripple color='skyblue' size='200px' style={{zIndex:'-1'}}/>\r\n      <h1 style={{color:'#2c7f80'}}>You swiped all cards.<br/>\r\n      Please wait until new accouts will be created.</h1></>: <></>}\r\n      </div>\r\n      <Match person={matchedPerson} onClose={onClose} popup={popup}/>\r\n    </div>\r\n    <Footer swipe_left={() => swipe('left')} swipe_right={() => swipe('right')}/>\r\n    </div>\r\n    );\r\n}\r\n\r\n\r\nconst mapstateToProps = state => {\r\n  return {\r\n    id: state.auth_reducer.id,\r\n    swiped: state.swipe_reducer.swiped,\r\n    liked: state.swipe_reducer.liked,\r\n    swipe_id: state.swipe_reducer.swipe_id,\r\n    cards: state.swipe_reducer.cards\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    Swipe: (swipe_id, swiped, liked) => dispatch(swipe_actions.Swipe(swipe_id, swiped, liked)),\r\n    chat_create: (user, friend) => dispatch(chat_actions.Create(user, friend)),\r\n    add_friend: (id, friend) => dispatch(contact_actions.Update(id, friend)),\r\n    receive_swipe: (id) => dispatch(swipe_actions.Receive(id)),\r\n    card_receive: () => dispatch(swipe_actions.card_receive())\r\n  }\r\n}\r\nexport default connect(mapstateToProps, mapDispatchToProps)(Cards);\r\n\r\n\r\n\r\n","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Setting\\Editor.js",["219","220"],"import React, { useState }from 'react'\r\nimport {Link, Redirect } from 'react-router-dom'\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\r\nimport { IconButton } from '@material-ui/core';\r\nimport ImagesBox from './ImagesBox'\r\nimport * as profile_actions from '../store/actions/profile_action';\r\nimport { connect } from 'react-redux'\r\nimport '../assets/Setting/Editor.css'\r\n\r\n\r\n\r\nfunction Editor(props) {\r\n    const [profileUpdated, setProfileUpdated] = useState(false)\r\n    const [formData, setFormData] = useState({\r\n        profile_id: props.profile_id,\r\n        name: props.name,\r\n        gender: props.gender,\r\n        age: props.age,\r\n        native_lan: props.native_lan,\r\n        foreign_lan: props.foreign_lan,\r\n        location: props.location,\r\n        time_start: props.time_start,\r\n        time_end: props.time_end,\r\n        intro: props.intro,\r\n        freeday: props.freeday \r\n    })\r\n\r\n\r\n    const languages = ['Arabic','Bengali','Burmese','Chinese','English','French','German','Gujarati','Hindi','Italian','Japanese','Kannada','Korean','Malayalam',\r\n    'Marathi','Oriya','Panjabi','Persian','Polish','Portuguese','Russian','Spanish','Tamil','Telugu','Thai','Turkish','Ukrainian','Urdu','Vietnamese']\r\n\r\n    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\r\n\r\n    const genders = ['Male', 'Female', 'Other']\r\n\r\n    const {profile_id, name, age, gender, native_lan, foreign_lan, location, time_start, time_end, intro, freeday} = formData\r\n    const onChange = e => setFormData({...formData, [e.target.name]: e.target.value})\r\n\r\n    function time() {\r\n        var time_range = null\r\n        time_start !== '' || time_end !== '' ?\r\n        time_range = <>{time_start}~{time_end}</>\r\n        :  time_range = (<></>)\r\n        return time_range\r\n    }\r\n\r\n    function Freedayset() {\r\n        console.log(freeday)\r\n        var freetime = null\r\n        freeday !== '' ?\r\n        freetime = <>freeday: {freeday}</>\r\n        :\r\n        freetime = null\r\n        return freetime\r\n      }\r\n\r\n    const onSubmit = e =>{\r\n    e.preventDefault()\r\n    props.update(profile_id, name, age, gender, native_lan, foreign_lan,  location, time_start, time_end, intro, freeday, props.token)\r\n    setProfileUpdated(true)\r\n    }\r\n    if (profileUpdated) {\r\n        return <Redirect to='/setting'/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='edit'>\r\n        <div className='edit_header'>\r\n                <Link to='/setting'>\r\n                    <IconButton style={{outline: 'none'}}>\r\n                        <ArrowForwardIosIcon/>\r\n                    </IconButton>\r\n                </Link>\r\n        </div>\r\n        <div className='edit_setting'>\r\n                    <form className='edit_form' onSubmit={onSubmit} encType='multipart/form-data'>\r\n                    <div className='edit_container'> \r\n                    <h1>Your Profile</h1>\r\n                    <ImagesBox images={props.images}/>\r\n                            <input placeholder='name' type='text' name='name' value={name} className='edit_input' id='edit_name' onChange={onChange}/>\r\n                            <input placeholder='age' type=\"number\" name='age' value={parseInt(age)} className='edit_input' onChange={onChange}/>\r\n                            <select className='edit_select' name='gender' onChange={onChange}>\r\n                                <option hidden>gender</option>\r\n                                {genders.map((sex) => {\r\n                                    if (sex===gender) {\r\n                                        return <option selected value={sex}>{sex}</option>\r\n                                    } else {\r\n                                    return <option value={sex}>{sex}</option>\r\n                                    }\r\n                                })}\r\n                            </select>\r\n                            <select className='edit_select' name='native_lan' onChange={onChange} required>\r\n                                <option hidden>You speak...</option>\r\n                                {languages.map((language) => {\r\n                                    if (language===native_lan) {\r\n                                        return <option selected value={language}>{language}</option>\r\n                                    } else {\r\n                                    return <option value={language}>{language}</option>\r\n                                    }\r\n                                })}\r\n                            </select>\r\n                            <select className='edit_select' name='foreign_lan' onChange={onChange} required>\r\n                                <option hidden>You want to learn ...</option>\r\n                                {languages.map((language) => {\r\n                                    if (language===foreign_lan) {\r\n                                        return <option selected value={language}>{language}</option>\r\n                                    } else {\r\n                                    return <option value={language}>{language}</option>\r\n                                    }\r\n                                })}\r\n                            </select>\r\n\r\n                            <select className='edit_select' name='freeday' onChange={onChange}>\r\n                                <option hidden>You are free on ...</option>\r\n                                {days.map((day) => {\r\n                                    if (day===freeday) {\r\n                                        return <option selected value={day}>{day}</option>\r\n                                    } else {\r\n                                    return <option value={day}>{day}</option>\r\n                                    }\r\n                                })}\r\n                            </select>\r\n                            <div className='edit_time'>\r\n                            <input type='time' className='edit_input_time' name='time_start' value={time_start} onChange={onChange}/>\r\n                            ~\r\n                            <input type='time' className='edit_input_time' name='time_end' value={time_end} onChange={onChange}/>\r\n                            </div>\r\n                            <textarea placeholder='Write your profile message here!' name='intro' value={intro} type='text' className='edit_input' onChange={onChange}/>\r\n                            </div>\r\n                            <button className='edit_button' type='submit'><span>SAVE</span></button>\r\n                        </form>\r\n        </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst mapstateToProps = state => {\r\n    return {\r\n        profile_id: state.profile_reducer.profile_id,\r\n        name: state.profile_reducer.name,\r\n        gender: state.profile_reducer.gender,\r\n        age: state.profile_reducer.age,\r\n        native_lan: state.profile_reducer.native_lan,\r\n        foreign_lan: state.profile_reducer.foreign_lan,\r\n        images: state.image_reducer.images,\r\n        location: state.profile_reducer.location,\r\n        time_start: state.profile_reducer.time_start,\r\n        time_end: state.profile_reducer.time_end,\r\n        intro: state.profile_reducer.intro,\r\n        freeday: state.profile_reducer.freeday,\r\n        token : state.auth_reducer.access\r\n    \r\n    }\r\n  }\r\n  \r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        update : (account_id, name, age, gender, native_lan, foreign_lan, location, time_start, time_end, intro, freeday) => \r\n        dispatch(profile_actions.Update(account_id, name, age, gender, native_lan, foreign_lan, location, time_start, time_end, intro, freeday))\r\n    }\r\n}\r\nexport default connect(mapstateToProps, mapDispatchToProps)(Editor);","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Setting\\DeleteImageModal.js",["221"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport * as image_actions from '../store/actions/image_action'\r\nimport { connect } from 'react-redux'\r\nimport '../assets/Setting/DeleteImageModal.css'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  modal: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  paper: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n    width: '500px',\r\n    height: '200px',\r\n    textAlign: 'center'\r\n  },\r\n}));\r\n\r\nfunction DeleteImageModal(props) {\r\n  console.log(props.deleting_image)\r\n  console.log(props.i)\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(props.open);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    props.parent_popup(false)\r\n  };\r\n\r\n  const image_deleter = () => {\r\n      setOpen(false)\r\n      props.parent_popup(false)\r\n      var i;\r\n      for (i = 0; i < props.images.length; i++) {\r\n        if (props.images[i].image === props.deleting_image) {\r\n          props.delete_image(props.profile_id, props.images[i].id)\r\n        }\r\n        }\r\n      }\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        aria-labelledby=\"transition-modal-title\"\r\n        aria-describedby=\"transition-modal-description\"\r\n        className={classes.modal}\r\n        open={open}\r\n        onClose={handleClose}\r\n        closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 500,\r\n        }}\r\n      >\r\n        <Fade in={open}>\r\n          <div className={classes.paper}>\r\n            <h1 style={{fontSize:'30px'}}>Are you sure you want to delete this picture?</h1>\r\n            <div className='crop_button'>\r\n            <button className='cancel_button' onClick={handleClose} id='outline'>Cancel</button>\r\n            <button className='upload_button' onClick={image_deleter} id='outline'>Delete</button>\r\n            </div>\r\n          </div>\r\n        </Fade>\r\n      </Modal>\r\n    </div>\r\n  );\r\n      }\r\n\r\nconst mapstateToProps = state => {\r\n  return {\r\n    images: state.image_reducer.images,\r\n    profile_id: state.profile_reducer.profile_id\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    delete_image: (profile_id, image_id) => dispatch(image_actions.image_delete(profile_id, image_id))\r\n  }\r\n}\r\n\r\nexport default connect(mapstateToProps, mapDispatchToProps)(DeleteImageModal)","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Setting\\Setting.js",["222","223","224"],"import React, { useEffect, useState } from 'react'\r\nimport Header from '../Swipe/Header'\r\nimport Profile from './Profile'\r\nimport '../assets/Setting/Setting.css'\r\nimport {Link, Redirect } from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport * as auth_actions from '../store/actions/auth_action'\r\nimport Card from '../Swipe/Card'\r\nimport Default from 'react-spinners-css/dist/Default'\r\n\r\n// className='setting'\r\nfunction Setting(props) {\r\n    console.log(typeof props.id)\r\n\r\n    const [logedOut, setLogedOut] = useState(false)\r\n    const DeleteAccount = () => {\r\n        if (Number(props.id) === 5) {\r\n            props.logout()\r\n            setLogedOut(true)\r\n        } else {\r\n            props.delete_account(props.id)\r\n        }\r\n    }\r\n\r\n    if (logedOut) {\r\n        return <Redirect to ='/'/>\r\n    }\r\n    return (\r\n        <div>\r\n            <Header/>\r\n            <div id='setting_content' style={{justifyContent: 'space-evenly'}}>\r\n            <Card data={props.person} images={props.images}/>\r\n            <div className='Button'>\r\n                <Link to='/edit'>\r\n                <button className='setting_button1' onfocus=\"this.blur();\"><span>Edit Your Profile</span></button>\r\n                </Link>\r\n                <Link to='/'>\r\n                <button className='setting_button1' onfocus=\"this.blur();\" onClick={props.logout}><span>Log Out</span></button>\r\n                </Link>\r\n            <button className='setting_button3' onfocus=\"this.blur();\"onClick={DeleteAccount}><span>Delete Your Account</span></button>\r\n            </div>\r\n            </div>\r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\nconst mapstateToProps = state => {\r\n    return {\r\n        id: state.auth_reducer.id,\r\n        person: state.profile_reducer,\r\n        images: state.image_reducer.images\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        logout: () => dispatch(auth_actions.logout()),\r\n        delete_account: () => dispatch(auth_actions.delete_account())\r\n    }\r\n}\r\nexport default connect(mapstateToProps, mapDispatchToProps)(Setting)\r\n\r\n\r\n","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Chat\\Chat.js",["225","226","227","228","229","230","231","232","233","234"],"import { connect } from 'react-redux'\r\nimport WebSocketInstance from './WebSocket.js'\r\nimport React, {useState, useEffect} from 'react'\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\nimport SpaIcon from '@material-ui/icons/Spa';\r\nimport InsertDriveFileIcon from '@material-ui/icons/InsertDriveFile';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport { IconButton } from '@material-ui/core';\r\nimport {Link} from 'react-router-dom'\r\nimport '../assets/Chat/Chat.css'\r\nimport {sendMessageHandler, initializeChat} from './MessageHandler'\r\nimport * as chat_actions from '../store/actions/chat_action'\r\nimport FriendProfile from './FriendProfile'\r\nimport { time_orderer } from \"./TimeHandler\";\r\nimport VideocamIcon from '@material-ui/icons/Videocam';\r\nimport axios from 'axios'\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\n\r\n\r\nfunction ChatScreen(props) {\r\n    const [text, setText] = useState('')\r\n    const [popup, setPopup] = useState(false)\r\n    const [sendingImages, setSendingImages] = useState([])\r\n    const [sendingFiles, setSendingFiles] = useState([])\r\n    const [input, setInput] = useState('')\r\n    const [allContents, setAllContents] = useState([])\r\n    const [quality, setQuality] = useState(12);\r\n\r\n    useEffect(() => {\r\n        console.log(props.ChatID)\r\n        initializeChat(props, WebSocketInstance)\r\n        WebSocketInstance.connect(props.ChatID)\r\n        setAllContents(...allContents, ...time_orderer(props.files, props.messages))\r\n    }, [props.ChatID])\r\n\r\n    function getBase64(file, cb) {\r\n        var reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = function () {\r\n            cb(reader.result)\r\n        }; \r\n        reader.onerror = function (error) {\r\n            console.log('Error: ', error);\r\n        };\r\n    }\r\n\r\n    let idCardBase64 = '';\r\n    const image_handler = (e) => {\r\n        getBase64(e.target.files[0], (result) => {\r\n            idCardBase64 = result;\r\n            setSendingImages([...sendingImages,{'name':e.target.files[0].name, 'file':idCardBase64}])\r\n        });\r\n    }\r\n\r\n    const file_handler = (e) => {\r\n        getBase64(e.target.files[0], (result) => {\r\n            idCardBase64 = result;\r\n            setSendingFiles([...sendingFiles,{'name':e.target.files[0].name, 'file':idCardBase64}])\r\n        });\r\n    }\r\n\r\n    const handleJoin = () => {\r\n\r\n        axios.get(`${process.env.REACT_APP_VIDEO_URL}/join`).then(res => {\r\n            let video_link = `${props.name} is calling you \\n\r\n  \r\n             ${window.location.origin}/join/${res.data.link}`\r\n            setSendingImages([])\r\n            setSendingFiles([])\r\n            sendMessageHandler(WebSocketInstance, props, video_link, sendingImages, sendingFiles)\r\n            //props.history?.push(`/join/${res.data.link}`);\r\n        })\r\n    }\r\n\r\n\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault()\r\n        if (text.length > 0 || sendingImages.length > 0 || sendingFiles.length > 0) {\r\n            sendMessageHandler(WebSocketInstance, props, text, sendingImages, sendingFiles)\r\n            console.log('submitted')\r\n        }\r\n        setText('')\r\n        setSendingImages([])\r\n        setSendingFiles([])\r\n    }\r\n\r\n    function onOpen() {\r\n        setPopup(true)\r\n    }\r\n    function onClose() {\r\n        setPopup(false)\r\n    }\r\n\r\n    const onChange = (e) => {\r\n        setText(e.target.value)\r\n    }\r\n\r\n    const onClick = (url) => {\r\n        let link=document.createElement('a');\r\n        link.download=url.content;\r\n        link.click();\r\n}\r\n\r\n    const download = (content) => {\r\n        const res = axios.get(`${process.env.REACT_APP_API_URL}/chat-api/file/download/${content.id}/`)\r\n    };\r\n\r\n    const video_path = '/video/' + uuidv4()\r\n\r\n    return (\r\n        <div className='chatScreen'>\r\n            <header className='chatScreen_header'>\r\n                <Link to='/chatpanel'>\r\n                    <IconButton id='chatScreen_header_back_icon'>\r\n                        <ArrowBackIosIcon style={{fontSize: '30px'}}/>\r\n                    </IconButton>\r\n                </Link>\r\n                <IconButton id='chatScreen_header_video_icon' onClick={handleJoin}>\r\n                        <VideocamIcon style={{fontSize: '30px', marigin: '10px'}}/>\r\n                </IconButton>\r\n            </header>\r\n            <div style={{position:'sticky', top:'30%', zIndex:0}}>\r\n            <SpaIcon id='chatScreen_logo'/>\r\n            </div>\r\n            <FriendProfile onClose={onClose} popup={popup} friend_profile_id={props.friend_profile_id}/>\r\n            <div style={{textAlign: 'center'}}>\r\n            <p1 className='chatScreen_match'>YOU MATCHED WITH {props.friend} ON {props.when_matched}</p1>\r\n            </div>\r\n            <ul className='chatScreen_messages'>\r\n            {props.contents.map(content => {\r\n            if (content.name === props.name) {\r\n                if (content.file_name !== undefined) {\r\n                    if (content.file_name.includes('jpg', 'jpeg', 'png')) {  //my image file\r\n                        return (\r\n                            <div className='chatScreen_message_sent'>\r\n                                <div className='chatScreen_download_sent'>\r\n                                <IconButton style={{outline:'none'}} onClick={e => download(content)} >\r\n                                <GetAppIcon/>\r\n                                </IconButton>\r\n                                </div>\r\n                                <img src={content.content}/>\r\n                            </div>\r\n                        )\r\n                    } else {                                                 // my other files\r\n                        return (\r\n                            <div className='chatScreen_message_sent'>\r\n                                <div className='chatScreen_file_sent'>\r\n                                <InsertDriveFileIcon className='chatScreen_file_icon'/>\r\n                                <p2>{content.file_name}</p2>\r\n                                <IconButton style={{outline:'none'}} onClick={e => download(content)} >\r\n                                <GetAppIcon/>\r\n                                </IconButton>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }\r\n                } else {                                               // my messages\r\n                    return (\r\n                        <div className='chatScreen_message_sent'>\r\n                        <p className='chatScreen_sent'>{content.content}<br/>\r\n                        <small>\r\n                        {content.timestamp.substring(0,16)}\r\n                         </small></p>\r\n                        </div>\r\n                        )\r\n                }\r\n            } else {\r\n                if (content.file_name !== undefined) {\r\n                    if (content.file_name.includes('jpg', 'jpeg', 'png')) {  //your image file\r\n                        return (\r\n                            <div className='chatScreen_message_reply'>\r\n                                <Avatar className='chatScreen_image'\r\n                                alt={content.name} src={props.friend_image} onClick={onOpen}/>\r\n                            <div className='chatScreen_text'>\r\n                                <img src={content.content}/>\r\n                                <div className='chatScreen_download_reply'>\r\n                                <IconButton style={{outline:'none'}} onClick={e => download(content)} >\r\n                                <GetAppIcon/>\r\n                                </IconButton>\r\n                                </div>\r\n                            </div>\r\n                            </div>\r\n                        )\r\n                    } else {                                                 // your other files\r\n                        return (\r\n                            <div className='chatScreen_message_reply'>\r\n                                <Avatar className='chatScreen_image'\r\n                                alt={content.name} src={props.friend_image} onClick={onOpen}/>\r\n                            <div className='chatScreen_text'>\r\n                                <div className='chatScreen_file_reply'>\r\n                                <InsertDriveFileIcon className='chatScreen_file_icon'/>\r\n                                <p2>{content.file_name}</p2>\r\n                                <IconButton style={{outline:'none'}} onClick={e => download(content)} >\r\n                                <GetAppIcon/>\r\n                                </IconButton>\r\n                                </div>\r\n                            </div>\r\n                            </div>\r\n                        )\r\n                    }\r\n                } else {                                                   // your messages\r\n                    return (\r\n                        <div className='chatScreen_message_reply'>\r\n                        <Avatar className='chatScreen_image'\r\n                        alt={content.name} src={props.friend_image} onClick={onOpen}/>\r\n                        <div className='chatScreen_text'>\r\n                        <p className='chatScreen_reply'>{content.content}<br/>\r\n                        <small>\r\n                        {content.timestamp.substring(0,16)}\r\n                        </small></p>\r\n                    </div>\r\n                    </div>\r\n                    )\r\n                }\r\n            }\r\n        })}\r\n            </ul>\r\n\r\n        <div>\r\n            <form className='chatScreen_input' onSubmit={onSubmit}>\r\n                <label for=\"file-upload\" class=\"custom-file-upload\" style={{marginTop: 'auto'}}>\r\n                    <AttachFileIcon/>\r\n                </label>\r\n                <input type='file' name='image' accept=\"audio/*, .pdf, .txt, .gif, .docx, .xlsx, .pptx, .pps\" size=\"60\"\r\n                id=\"file-upload\" onChange={file_handler}/>\r\n\r\n                \r\n                <label for=\"image-upload\" class=\"custom-file-upload\" style={{marginTop: 'auto'}}>\r\n                    <ImageIcon/>\r\n                </label>\r\n                <div className='chatScreen_input_field' style={sendingImages.length>0?{border:'solid aqua'}:{}}>\r\n                    {sendingFiles.length>0? sendingFiles.map(file =>\r\n                        <div className='chatScreen_file_outer'>\r\n                            <InsertDriveFileIcon className='chatScreen_file_icon'/>\r\n                            <p1>{file.name}</p1>\r\n                            \r\n                </div>):<></>}\r\n                    {sendingImages.length > 0? sendingImages.map(image => <img src={image.file}/>):<></>}\r\n                    <input type='file' name='image' accept=\"image/*, video/*\" size=\"60\"\r\n                    id=\"image-upload\" onChange={image_handler}/>\r\n                    <TextareaAutosize className='chatScreen_input_text' rowsMax={4} placeholder=\"Message\" onChange={onChange}/>\r\n                </div>\r\n                <button className='chatScreen_submit' type='submit'>SEND</button>\r\n            </form>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nconst mapstateToProps = (state, objects) => {\r\n    return {\r\n        name: state.auth_reducer.name,\r\n        ChatID: objects.match.params.ChatID,\r\n        friend: objects.match.params.friend,\r\n        friend_image: state.chat_reducer.friend_image,\r\n        when_matched: state.chat_reducer.when_matched,\r\n        friend_profile_id: state.chat_reducer.friend_profile_id,\r\n        messages: state.chat_reducer.messages,\r\n        files: state.chat_reducer.files,\r\n        contents: time_orderer(state.chat_reducer.files, state.chat_reducer.messages)\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetch_messages: (messages) => dispatch(chat_actions.setMessages(messages)),\r\n        new_message: (message) => dispatch(chat_actions.addMessage(message))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapstateToProps, mapDispatchToProps)(ChatScreen)\r\n","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Chat\\ChatPanels.js",["235"],"import React, {useEffect, useState}from 'react'\r\nimport ChatPanel from './ChatPanel'\r\nimport Header from '../Swipe/Header'\r\nimport {connect } from 'react-redux'\r\nimport axios from 'axios'\r\nfunction ChatPanels(props) {\r\n    const [friends, setFriends] = useState([])\r\n    useEffect(() => {\r\n        axios.defaults.headers = {\r\n            \"Content-Type\": 'application/json'\r\n        }\r\n        axios.get(`${process.env.REACT_APP_API_URL}/chat-api/chat/${props.id}/`)\r\n        .then(res => {\r\n            if (res.data.chats_list !== undefined && res.data.chats_list !== null ) {\r\n                setFriends([...friends, ...res.data.chats_list])\r\n            }\r\n        }\r\n        )},\r\n         [])\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {/* {console.log('friends::',friends[0].participants)} */}\r\n            <Header/>\r\n            <h1 className='chatpanel_title'>Messages</h1>\r\n                <div className='chats'>\r\n                    {friends.map(friend => (\r\n                            <ChatPanel friend_data={friend}/>\r\n                        )\r\n                    )}\r\n                    {friends.length === 0?<h2 className='chatpanel_nomatch'>You don't have any matches yet(´;ω;｀)\r\n                    <br/>Let's Swipe!!</h2>:<></>}\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\nconst mapstateToProps = state => {\r\n    return {\r\n        username: state.auth_reducer.name,\r\n        id: state.auth_reducer.id\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapstateToProps, null)(ChatPanels)\r\n\r\n//Authorization `Token ${token}\r\n\r\n\r\n","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\store\\reducers\\contact_reducer.js",[],"C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\store\\reducers\\swipe_reducer.js",[],"C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\store\\reducers\\profile_reducer.js",["236"],"import * as actionType from '../actions/actionType'\r\n\r\nfunction null_handler(object) {\r\n    var new_object\r\n    if (object === 'null' || object === null) {\r\n        new_object = ''\r\n    } else {\r\n        new_object = object\r\n    }\r\n    return new_object\r\n}\r\n\r\nconst initialState = {\r\n    profile_id: localStorage.getItem('profile_id'),\r\n    name: localStorage.getItem('name'),\r\n    age: localStorage.getItem('age'),\r\n    gender: localStorage.getItem('gender'),\r\n    native_lan:  localStorage.getItem('native_lan'),\r\n    foreign_lan: localStorage.getItem('foreign_lan'),\r\n    images:localStorage.getItem('profile_images')!== undefined?JSON.parse(localStorage.getItem('profile_images')):undefined,\r\n    location: localStorage.getItem('location'),\r\n    time_start: (localStorage.getItem('time_start') !== 'null'? localStorage.getItem('time_start'): ''),\r\n    time_end: null_handler(localStorage.getItem('time_end')),\r\n    intro: (localStorage.getItem('intro') !=='null'? localStorage.getItem('intro'): ''),\r\n    freeday: (localStorage.getItem('freeday') !=='null'? localStorage.getItem('freeday'): ''),\r\n}\r\n\r\n// it is not receive to setitem, but create isn't it\r\n// but you do so, you need to set when you update it\r\nfunction profile_reducer(state=initialState, action) {\r\n    const {type, payload} = action\r\n\r\n    switch(type) {\r\n        case actionType.PROFILE_RECEIVE_SUCCESS:\r\n        case actionType.PROFILE_UPDATE_SUCCESS:\r\n            var image_path\r\n            if (null_handler(payload.image) !== '') {\r\n                //`${process.env.REACT_APP_API_URL}${payload.image}`\r\n                image_path = payload.image\r\n            } else {\r\n                image_path = ''\r\n            }\r\n            localStorage.setItem('profile_id', payload.id)\r\n            localStorage.setItem('name', payload.name)\r\n            localStorage.setItem('age', payload.age)\r\n            localStorage.setItem('gender', payload.gender)\r\n            localStorage.setItem('native_lan', payload.native_lan)\r\n            localStorage.setItem('foreign_lan', payload.foreign_lan)\r\n            localStorage.setItem('profile_images', JSON.stringify(payload.images))\r\n            localStorage.setItem('location', payload.location)\r\n            localStorage.setItem('time_start', payload.time_start)\r\n            localStorage.setItem('time_end', payload.time_end)\r\n            localStorage.setItem('intro', payload.intro)\r\n            localStorage.setItem('freeday', payload.freeday)\r\n            return {\r\n                ...state,\r\n                profile_id: payload.id,\r\n                name: payload.name,\r\n                age: payload.age,\r\n                gender: payload.geder,\r\n                native_lan:  payload.native_lan,\r\n                foreign_lan: payload.foreign_lan,\r\n                images:payload.images,\r\n                location: payload.location,\r\n                time_start: null_handler(payload.time_start),\r\n                time_end: null_handler(payload.time_end),\r\n                intro: payload.intro,\r\n                freeday: payload.freeday,\r\n            }\r\n\r\n\r\n        case actionType.PROFILE_DELETE_SUCCESS:\r\n        case actionType.LOG_OUT:\r\n        case actionType.DELETE_ACCOUNT_SUCCESS:\r\n            localStorage.removeItem('profile_id')\r\n            localStorage.removeItem('name')\r\n            localStorage.removeItem('age')\r\n            localStorage.removeItem('gender')\r\n            localStorage.removeItem('native_lan')\r\n            localStorage.removeItem('foreign_lan')\r\n            localStorage.removeItem('profile_images')\r\n            localStorage.removeItem('location')\r\n            localStorage.removeItem('time_start')\r\n            localStorage.removeItem('time_end')\r\n            localStorage.removeItem('intro')\r\n            localStorage.removeItem('freeday')\r\n            return {\r\n                ...state,\r\n                profile_id: null,\r\n                name: null,\r\n                age: null,\r\n                gender: null,\r\n                native_lan:  null,\r\n                foreign_lan: null,\r\n                images:null,\r\n                location: null,\r\n                time_start: null,\r\n                time_end:null,\r\n                intro: null,\r\n                freeday: null,\r\n\r\n            }\r\n            \r\n        case actionType.PROFILE_CREATE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                profile_id: payload.id\r\n            }\r\n\r\n        case actionType.PROFILE_UPDATE_FAIL:\r\n        case actionType.PROFILE_RECEIVE_FAIL:\r\n        case actionType.PROFILE_DELETE_FAIL:\r\n            return {\r\n                ...state\r\n            }\r\n\r\n        case actionType.SWIPE_UPDATE_SUCCESS:\r\n            return {\r\n                ...state,\r\n            }\r\n\r\n        default:\r\n            return {\r\n                ...state\r\n            }\r\n    }\r\n}\r\n\r\nexport default profile_reducer","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\store\\reducers\\auth_reducer.js",[],"C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\store\\reducers\\chat_reducer.js",[],"C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\store\\reducers\\image_reducer.js",[],"C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Chat\\WebSocket.js",["237"],"var message = ''\r\n\r\nclass WebSocketService {\r\n    // static is method or instance in the class\r\n    static instance = null;\r\n    // put sth later\r\n    callbacks = {};\r\n    static getInstance() {\r\n        if (!WebSocketService.instace) {\r\n            WebSocketService.instance = new WebSocketService()\r\n        }\r\n        return WebSocketService.instance\r\n    }\r\n\r\n    constructor() {\r\n        this.socketRef = null;\r\n\r\n    }\r\n    connect(chaturl) {\r\n        //127.0.0.1:8000\r\n        //localhost:8000\r\n        //speakup-heroku.herokuapp.com\r\n        //ws => wss\r\n        var ws_scheme = window.location.protocol === \"https:\" ? \"wss\" : \"ws\";\r\n        var host = window.location.host\r\n        let path; \r\n        if (host.includes('localhost')) {\r\n            path = `ws://localhost:8000/ws/chat/${chaturl}/`\r\n        } else {\r\n            path = `${ws_scheme}://${host}/ws/chat/${chaturl}/`\r\n        }\r\n        console.log(path)\r\n        this.socketRef = new WebSocket(path)\r\n        this.socketRef.onopen = () => {\r\n            console.log('open')\r\n        }\r\n        this.socketNewMessage(JSON.stringify({\r\n            // fetch_messages => messages\r\n            command: 'messages'\r\n        }))\r\n        this.socketRef.onmessage = e => {\r\n            this.socketNewMessage(e.data)\r\n        }\r\n        this.socketRef.onclose = () => {\r\n            console.log('close')\r\n            this.connect()\r\n        }\r\n        this.socketRef.onerror = e => {\r\n            console.log('error in Websocket::',e)\r\n        }\r\n    }\r\n\r\n    disconnect() {\r\n        this.socketRef.close()\r\n    }\r\n\r\n    //this is receiving function\r\n    socketNewMessage(data) {\r\n        const parseData = JSON.parse(data)\r\n        const command = parseData.command\r\n        if (Object.keys(this.callbacks).length === 0) {\r\n            return \r\n        }\r\n        if (command === 'messages') {\r\n            // as you can see addCallback, callbacks[command] is function. so you put Parsedata.message(s) in messagesCallback or newMessageCallback\r\n            if (parseData.messages) {\r\n                this.callbacks[command](parseData.messages)\r\n            } else if (parseData.files) {\r\n                this.callbacks[command](parseData.files)\r\n            }\r\n        }\r\n        if (command === 'new_message') {\r\n            if (parseData.message) {\r\n                this.callbacks[command](parseData.message)\r\n            } else if (parseData.file) {\r\n                this.callbacks[command](parseData.file)\r\n            }\r\n        }\r\n    }\r\n\r\n    fetchMessages(username, ChatID) {\r\n        this.sendMessage({command: 'fetch_messages',\r\n         username: username,\r\n        ChatID: ChatID})\r\n    }\r\n    \r\n    newChatMessage(message) {\r\n        console.log('newChatMessage::', message)\r\n        this.sendMessage({command: 'new_message',\r\n        from: message.from,\r\n        message: message.content,\r\n        ChatID: message.ChatID,\r\n        files:message.files})\r\n    }\r\n\r\n    addCallbacks(messagesCallback, newMessageCallback) {\r\n        this.callbacks['messages'] = messagesCallback;\r\n        this.callbacks['new_message'] = newMessageCallback\r\n    }\r\n\r\n    sendMessage(data) {\r\n        console.log('data in sendMessage',data)\r\n        try {\r\n            this.socketRef.send(JSON.stringify({...data }))\r\n        } catch (err) {\r\n            console.log(err.message)\r\n        } \r\n    }\r\n    state() {\r\n        return this.socketRef.readyState\r\n    }\r\n}\r\n\r\n// WebSocketInstance is new instance \r\nconst WebSocketInstance = WebSocketService.getInstance()\r\n\r\nexport default WebSocketInstance;","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\store\\actions\\profile_action.js",[],"C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\store\\actions\\actionType.js",[],"C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\store\\actions\\swipe_action.js",[],"C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\store\\actions\\contact_action.js",[],"C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Swipe\\MatchedCard.js",["238","239"],"import React, { useState } from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport MobileStepper from '@material-ui/core/MobileStepper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport { connect } from 'react-redux'\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport clsx from 'clsx';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport '../assets/Swipe/Card.css'\r\nimport '../assets/Swipe/Match.css'\r\nimport * as chat_actions from '../store/actions/chat_action'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: 400,\r\n    flexGrow: 1,\r\n  },\r\n  header: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    height: 50,\r\n    paddingLeft: theme.spacing(4),\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  img: {\r\n    height: 475,\r\n    display: 'block',\r\n    maxWidth: 400,\r\n    overflow: 'hidden',\r\n    width: '100%',\r\n  },\r\n  expand: {\r\n    transform: 'rotate(0deg)',\r\n    marginLeft: 'auto',\r\n    marginRight: 'auto',\r\n    outline: 'none',\r\n    transition: theme.transitions.create('transform', {\r\n      duration: theme.transitions.duration.shortest,\r\n    }),\r\n  },\r\n  expandOpen: {\r\n    transform: 'rotate(180deg)',\r\n  },\r\n}));\r\n\r\nfunction OneCard(props) {\r\n  const classes = useStyles();\r\n  const [expanded, setExpanded] = React.useState(false);\r\n  const [input, setInput] = useState('')\r\n\r\n  const handleExpandClick = () => {\r\n    setExpanded(!expanded);\r\n  };\r\n\r\n  const theme = useTheme();\r\n  const [activeStep, setActiveStep] = React.useState(0);\r\n  const maxSteps = props.data.images.length >0? props.data.images.length: 1\r\n\r\n  const handleNext = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n  };\r\n\r\n  const handleStepChange = (step) => {\r\n    setActiveStep(step);\r\n  };\r\n\r\n  function time() {\r\n    var time_range = null\r\n    props.data.time_start != null || props.data.time_end != null ?\r\n    time_range = <>{props.data.time_start}~{props.data.time_end}</>\r\n    :  time_range = (<></>)\r\n    return time_range\r\n}\r\n\r\n  function freeday() {\r\n    var freeday = null\r\n    props.data.freeday != null ?\r\n    freeday = <>freeday: {props.data.freeday}</>\r\n    :\r\n    freeday = null\r\n    return freeday\r\n  }\r\n\r\n  const onChange = (e) => {\r\n    setInput(e.target.value)\r\n  }\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    props.send_first_message(input, props.contact_id)\r\n    setInput('')\r\n    props.onClose(false)\r\n\r\n  }\r\n\r\n  return (\r\n      <Card id='card_root'>\r\n        <div id='card_imagebox' style={{position:'relative'}}>\r\n          <SwipeableViews\r\n            axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n            index={activeStep}\r\n            onChangeIndex={handleStepChange}\r\n            enableMouseEvents\r\n          >\r\n        {props.images === undefined?props.data.images.map((step, index) => (\r\n            <div key={props.data.name}>\r\n              {Math.abs(activeStep - index) <= 2?(\r\n                <img className={classes.img} src={step}/>\r\n              ) :null }\r\n            </div>)):props.data.images.map((step, index) => (\r\n            <div key={props.id}>\r\n              {Math.abs(activeStep - index) <= 2?(\r\n                <img className={classes.img} src={step.image}/>\r\n              ) :null }\r\n            </div>))}\r\n          </SwipeableViews>\r\n          \r\n      \r\n\r\n          <div id='card_stepper'>\r\n          <MobileStepper\r\n          variant=\"dots\"\r\n          steps={maxSteps>1? maxSteps: 0 }\r\n          position=\"static\"\r\n          activeStep={activeStep}\r\n          nextButton={\r\n            <Button size=\"small\" onClick={handleNext} disabled={activeStep === maxSteps - 1} id='outline'>\r\n              {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n            </Button>\r\n          }\r\n          backButton={\r\n            <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0} id='outline'>\r\n              {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n            </Button>\r\n          }\r\n          />\r\n          </div>\r\n          <h1>New Match!</h1>\r\n    </div>\r\n\r\n      <IconButton id='match_icon' onClick={() => props.onClose(false)}>\r\n        <ClearIcon style={{fontSize: 'large'}}/>\r\n      </IconButton>\r\n\r\n    <CardContent>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n          {props.data.name}\r\n        </Typography>\r\n      </CardContent>\r\n      <Typography style={{marginLeft: '10px'}}>native language: {props.data.native_lan}<br/>\r\n                 want to learn: {props.data.foreign_lan}<br/><br/>\r\n      </Typography>\r\n      <CardActions disableSpacing>\r\n        <IconButton\r\n          className={clsx(classes.expand, {\r\n            [classes.expandOpen]: expanded,\r\n          })}\r\n          onClick={handleExpandClick}\r\n          aria-expanded={expanded}\r\n          aria-label=\"show more\"\r\n          id='outline'\r\n        >\r\n          <ExpandMoreIcon onClick={handleExpandClick} id='outline'/>\r\n        </IconButton>\r\n      </CardActions>\r\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n        <CardContent>\r\n        <Typography paragraph>{freeday}  {time}</Typography>\r\n          <Typography className='card_intro'  paragraph>\r\n            {props.intro}\r\n          </Typography>\r\n        </CardContent>\r\n      </Collapse>\r\n      <form className='match_form' onSubmit={onSubmit}>\r\n          <input type='text' placeholder='write the first message!' className='match_input' onChange={onChange}/>\r\n          <button className='match_submit' type='submit'>SEND</button>\r\n      </form>\r\n    </Card>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state,params) => {\r\n  return {\r\n    contact_id: state.contact_reducer.contact_id,\r\n    data: params.data,\r\n    onClose: params.onClose\r\n  }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    send_first_message: (content, contact_id) => dispatch(chat_actions.send_first_message(content, contact_id))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OneCard);\r\n","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\store\\actions\\image_action.js",[],"C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\store\\actions\\chat_action.js",[],"C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Swipe\\Card.js",["240","241"],"import React from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport MobileStepper from '@material-ui/core/MobileStepper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport clsx from 'clsx';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport '../assets/Swipe/Card.css'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: 400,\r\n    flexGrow: 1,\r\n  },\r\n  header: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    height: 50,\r\n    paddingLeft: theme.spacing(4),\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  img: {\r\n    height: 475,\r\n    display: 'block',\r\n    maxWidth: 400,\r\n    overflow: 'hidden',\r\n    width: '100%',\r\n  },\r\n  expand: {\r\n    transform: 'rotate(0deg)',\r\n    marginLeft: 'auto',\r\n    marginRight: 'auto',\r\n    outline: 'none',\r\n    transition: theme.transitions.create('transform', {\r\n      duration: theme.transitions.duration.shortest,\r\n    }),\r\n  },\r\n  expandOpen: {\r\n    transform: 'rotate(180deg)',\r\n  },\r\n}));\r\n\r\nfunction OneCard(props) {\r\n  const classes = useStyles();\r\n  const [expanded, setExpanded] = React.useState(false);\r\n\r\n  const handleExpandClick = () => {\r\n    setExpanded(!expanded); \r\n  }\r\n\r\n  const theme = useTheme();\r\n  const [activeStep, setActiveStep] = React.useState(0);\r\n  const maxSteps = (props.data.images!= null && props.data.images.length >0)? props.data.images.length: 1\r\n\r\n  const handleNext = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n  };\r\n\r\n  const handleStepChange = (step) => {\r\n    setActiveStep(step);\r\n  };\r\n\r\n  function time() {\r\n    var time_range = null\r\n    props.data.time_start != null || props.data.time_end != null ?\r\n    time_range = <>{props.data.time_start}~{props.data.time_end}</>\r\n    :  time_range = (<></>)\r\n    return time_range\r\n}\r\n\r\n  function freeday() {\r\n    var freeday = null\r\n    props.data.freeday != null ?\r\n    freeday = <>freeday: {props.data.freeday}</>\r\n    :\r\n    freeday = null\r\n    return freeday\r\n  }\r\n\r\n  return (\r\n      <Card id='card_root'>\r\n        <div id='card_imagebox' style={{position:'relative'}}>\r\n          <SwipeableViews\r\n            axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n            index={activeStep}\r\n            onChangeIndex={handleStepChange}\r\n            enableMouseEvents\r\n          >\r\n        {props.images !== null?props.images === undefined?props.data.images.map((step, index) => (\r\n            <div key={props.data.name}>\r\n              {Math.abs(activeStep - index) <= 2?(\r\n                <img className={classes.img} src={step}/>\r\n              ) :null }\r\n            </div>)):props.images.map((step, index) => (\r\n            <div key={props.id}>\r\n              {Math.abs(activeStep - index) <= 2?(\r\n                <img className={classes.img} src={step.image}/>\r\n              ) :null }\r\n            </div>)):null}\r\n          </SwipeableViews>\r\n          <div id='card_stepper'>\r\n          <MobileStepper\r\n          variant=\"dots\"\r\n          steps={maxSteps>1? maxSteps: 0 }\r\n          position=\"static\"\r\n          activeStep={activeStep}\r\n          nextButton={\r\n            <Button size=\"small\" onClick={handleNext} disabled={activeStep === maxSteps - 1} id='outline'>\r\n              {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n            </Button>\r\n          }\r\n          backButton={\r\n            <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0} id='outline'>\r\n              {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n            </Button>\r\n          }\r\n          />\r\n          </div>\r\n    </div>\r\n\r\n    <CardContent>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n          {props.data.name}\r\n        </Typography>\r\n      </CardContent>\r\n      <Typography style={{marginLeft: '10px'}}>native language: {props.data.native_lan}<br/>\r\n                 want to learn: {props.data.foreign_lan}<br/><br/>\r\n      </Typography>\r\n      <CardActions disableSpacing>\r\n        <IconButton\r\n          className={clsx(classes.expand, {\r\n            [classes.expandOpen]: expanded,\r\n          })}\r\n          onClick={handleExpandClick}\r\n          aria-expanded={expanded}\r\n          aria-label=\"show more\"\r\n          id='outline'\r\n        >\r\n          <ExpandMoreIcon onClick={handleExpandClick} id='outline'/>\r\n        </IconButton>\r\n      </CardActions>\r\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n        <CardContent>\r\n        <Typography paragraph>{freeday}  {time}</Typography>\r\n          <Typography className='card_intro'  paragraph>\r\n            {props.intro}\r\n          </Typography>\r\n        </CardContent>\r\n      </Collapse>\r\n    </Card>\r\n  );\r\n}\r\n\r\n\r\nexport default OneCard;\r\n\r\n","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Setting\\ImagesBox.js",["242","243","244","245"],"import React, { useRef, useState } from 'react'\r\nimport clamp from 'lodash-es/clamp'\r\nimport swap from 'lodash-move'\r\nimport { useGesture, useDrag} from 'react-use-gesture'\r\nimport { useSprings, interpolate, animated } from 'react-spring'\r\nimport { IconButton } from '@material-ui/core';\r\nimport Crop from './Crop'\r\nimport DeleteImageModal from \"./DeleteImageModal\";\r\nimport AddCircleOutlineRoundedIcon from '@material-ui/icons/AddCircleOutlineRounded';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport * as profile_actions from '../store/actions/profile_action';\r\nimport { connect } from 'react-redux'\r\nimport '../assets/Setting/ImageBox.css'\r\n\r\n\r\n\r\n// \"index =>\"format is the react-spring format. it is kind of map function. check the official website, usesprings section\r\nconst fn = (order, down, originalIndex, curIndex,x, y) => index =>\r\n  down && index === originalIndex\r\n    ? {x:(curIndex%3)*170 + x, y: (curIndex>2?1:0) * 220 + y, scale: 1.1,\r\n       zIndex: '1', shadow: 15, immediate: n => n === 'y' || n === 'zIndex'}\r\n    : {x:((order.indexOf(index))%3)*170, y: (order.indexOf(index)>2?1:0) * 220, scale: 1,\r\n       zIndex: '0', shadow: 1, immediate: false}\r\n\r\n\r\n\r\nfunction ImagesBox(props) {\r\n  const images = props.images\r\n  const order = useRef(images.map((_, index) => index)) //=> the list of index [1,2,3,4, ...]\r\n  const remaining_list = Array.from({length: 6 - images.length}, (v, k) => k);\r\n  //ex) useSprings(number, index => ({opacity: 1})) therefore it should be shaped.\r\n  const [newImage, setNewImage] = useState()\r\n  const [url, setUrl] = useState()\r\n  const [crop, setCrop] = useState(false)\r\n  const [deleteModal, setDeleteModal] = useState(false)\r\n  const [deletingImage, setDeletingImage] = useState()\r\n  const [springs, setSprings] = useSprings(images.length, fn(order.current)) // Create springs, each corresponds to an item, controlling its transform, scale, etc.\r\n\r\n\r\n  const image_handler = (e) => {\r\n    console.log(e.target.files[0])\r\n    setUrl(URL.createObjectURL(e.target.files[0]))\r\n    setNewImage(e.target.files[0])\r\n    setCrop(true)\r\n    \r\n  }\r\n\r\n  const click_handler = (i) => {\r\n    setDeleteModal(true)\r\n    setDeletingImage(images[i].image)\r\n  }\r\n  //variables are based on springs namely, fn = (order, down, originalIndex, curIndex,x, y)\r\n  const bind = useDrag(({ args: [originalIndex], down, movement: [x,y], delta:[deltaX, deltaY] }) => {\r\n    const curIndex = order.current.indexOf(originalIndex)\r\n    let row_num\r\n    let col_num \r\n    if (images.length > 3) {\r\n      row_num = 2\r\n      col_num = 3\r\n    } else if (images.length > 2) {\r\n      row_num = 1\r\n      col_num = 3\r\n    } else if (images.length > 1) {\r\n      row_num = 1\r\n      col_num = 2\r\n    } else {\r\n      row_num = 1\r\n      col_num = 1\r\n    }\r\n    const col_index = curIndex%col_num\r\n    const row_index = curIndex>2?1:0\r\n    const curCol = clamp(Math.round((col_index * 200 + x) / 200), 0, col_num-1)\r\n    const curRow = clamp(Math.round((row_index * 100 + y) / 100), 0, row_num-1)\r\n    let new_index\r\n    if (curCol === 2 && curRow === 1) {\r\n      new_index = 5\r\n    } else if (curCol === 1 && curRow === 1) {\r\n      new_index = 4\r\n    } else if (curCol ===0 && curRow === 1) {\r\n      new_index = 3\r\n    } else if (curCol === 2 && curRow === 0) {\r\n      new_index = 2\r\n    } else if (curCol === 1 && curRow === 0) {\r\n      new_index = 1\r\n    } else {\r\n      new_index = 0\r\n    }\r\n    // swap(array, a index, other index) => ex) swap([1,2,3,4], 1, 2) => [1,3,2,4]\r\n    let newOrder = swap(order.current, curIndex, new_index)\r\n    // newOrder = swap(newOrder, curIndex, curCol)\r\n    setSprings(fn(newOrder, down, originalIndex, curIndex, x, y)) // Feed springs new style data, they'll animate the view without causing a single render\r\n    if (!down) order.current = newOrder\r\n  })\r\n  \r\n  // {...bind(i) is the format for react-native-gesture documentation, useDrag section(bookmark)}\r\n  return (\r\n    <div className=\"images_box\">\r\n      {crop?<Crop open={crop} image={newImage} url={url} parent_popup={setCrop} order={order}/>:<></>}\r\n      {deleteModal?<DeleteImageModal open={deleteModal} parent_popup={setDeleteModal} deleting_image={deletingImage}/>:<></>}\r\n      {springs.map(({ zIndex, shadow, x, y, scale }, i) => (\r\n        <animated.div\r\n          key={i}\r\n          {...bind(i)}\r\n          style={{\r\n            zIndex,\r\n            boxShadow: shadow.interpolate(s => `rgba(0, 0, 0, 0.15) 0px ${s}px ${2 * s}px 0px`),\r\n            //transform: rotate(20), skew(20), scale(2), translate3d() etc...\r\n            transform: interpolate([x, y, scale], (x, y, s) => `translate3d(${x}px,${y}px,0px) scale(${s})`),\r\n            backgroundImage: `url(${images[i].image})`,\r\n            backgroundSize:'cover'\r\n          }}\r\n        >\r\n          <HighlightOffIcon onClick={() =>click_handler(i)} className='delete_image'/>\r\n        </animated.div>\r\n      ))}\r\n      {remaining_list.map((i) => (\r\n        <div className='new_image' style={{top:i<3?'230px':'10px', right:i%3===0?'-170px':(i -1)%3===0?'0px':'170px'}}> \r\n        <label for=\"file-upload\" class=\"custom-file-upload\">\r\n        <AddCircleOutlineRoundedIcon className='add_image'/>\r\n        </label>\r\n        <input type='file' name='image' accept=\"image/png, image/jpeg\" size=\"60\" id=\"file-upload\" onChange={image_handler}/>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default ImagesBox","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Swipe\\Footer.js",[],"C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Swipe\\Header.js",["246"],"import React from 'react'\r\nimport '../assets/Swipe/Header.css'\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport QuestionAnswerIcon from '@material-ui/icons/QuestionAnswer';\r\nimport SpaIcon from '@material-ui/icons/Spa';\r\n// import ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos'\r\nimport { IconButton } from '@material-ui/core';\r\nimport {Link, useHistory} from 'react-router-dom'\r\n\r\n// there is two Header so far in App.js. the one is without variable and the other is with a variable\r\n// the first one is backButton is null so you can get PersonIcon\r\n// the second one is backButton is '/' and you can get ArrowbackIosIcon. if you click the icon. you can back to '/' which is backButton\r\nfunction Header({backButton}) {\r\n  const history = useHistory()\r\n  return (\r\n    <div className=\"header\">\r\n    <Link to='/setting'>\r\n      <IconButton id='header_icon'>\r\n      <PersonIcon fontSize='large'/>\r\n      </IconButton>\r\n    </Link>\r\n\r\n    <Link to='/swipe'>\r\n      <IconButton id='header_logo'>\r\n      <SpaIcon style={{ fontSize: 50 }}/>\r\n      </IconButton>\r\n    </Link>\r\n\r\n    <Link to='/chatpanel'>\r\n      <IconButton id='header_icon'>\r\n      <QuestionAnswerIcon fontSize='large'/>\r\n      </IconButton>\r\n    </Link>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Chat\\ChatPanel.js",["247"],"import React, {useState}from 'react'\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport '../assets/Chat/ChatPanel.css'\r\nimport {Link} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport * as chat_actions from '../store/actions/chat_action'\r\nimport time_handler from './TimeHandler'\r\nimport FriendProfile from './FriendProfile'\r\n\r\n\r\nfunction ChatPanel(props) {\r\n\r\n    const link = `chat/${props.friend_data.name}/${props.friend_data.Chat_ID}/`\r\n    function handleClick() {\r\n        const matched_day = props.friend_data.when_matched.split('T')[0]\r\n        props.set_friend(props.friend_data.image, matched_day, props.friend_data.profile_id)\r\n    }\r\n    const [popup, setPopup] = useState(false)\r\n\r\n    function onOpen() {\r\n        setPopup(true)\r\n    }\r\n    function onClose() {\r\n        setPopup(false)\r\n    }\r\n\r\n    return (\r\n        \r\n        <div className='chatpanel'>\r\n            <Avatar className='chatpanel_image' alt={props.friend_data.name}\r\n            src={props.friend_data.image} onClick={onOpen}/>\r\n            <Link to={link} onClick={handleClick} className='chatpanel_link'>\r\n            <div className='chatpanel_detail'>\r\n                <h2>{props.friend_data.name}</h2>\r\n                <p>{props.friend_data.last_message}</p>\r\n            </div>\r\n            <p className='chatpanel_timestamp'>{time_handler(props.friend_data.last_timestamp)}</p>\r\n            </Link>\r\n            <FriendProfile onClose={setPopup} popup={popup} friend_profile_id={props.friend_data.profile_id}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        set_friend: (picture, when_matched, friend_profile_id) => \r\n        dispatch(chat_actions.set_friend(picture, when_matched, friend_profile_id))\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(ChatPanel)\r\n","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Chat\\FriendProfile.js",["248"],"import React, {useState, useEffect} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport FriendCard from './FriendCard'\r\nimport '../assets/Swipe/Match.css'\r\nimport axios from 'axios'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  modal: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  paper: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    //border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    //padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nexport default function FriendProfile(props) {\r\n  const classes = useStyles();\r\n\r\n  const [friendData, setFriendData] = useState()\r\n  useEffect(() => {\r\n    axios.get(`${process.env.REACT_APP_API_URL}/profile/friend/${props.friend_profile_id}/`)\r\n    .then(res => {\r\n        setFriendData(res.data)})\r\n    }, [])\r\n\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        aria-labelledby=\"transition-modal-title\"\r\n        aria-describedby=\"transition-modal-description\"\r\n        className={classes.modal}\r\n        open={props.popup}\r\n        // onClose={handleClose}\r\n        closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 500,\r\n        }}>\r\n        <Fade in={props.popup}>\r\n          <div className={classes.paper}>\r\n          <FriendCard data={friendData} onClose={props.onClose}/>\r\n          </div>\r\n        </Fade>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Chat\\MessageHandler.js",[],"C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Chat\\TimeHandler.js",["249","250"],"export default function time_handler(props) {\r\n    var event = new Date();\r\n    let [cur_date, cur_time] = event.toLocaleString('en-GB', { timeZone: 'Europe/London' }).split(',')\r\n    let [cur_day, cur_month, cur_year] = cur_date.split('/')\r\n    let [cur_hour, cur_minute, cur_sec] = cur_time.split(':')\r\n    \r\n    if (props !== 'Start now') {\r\n        const [date, time] = props.split('T')\r\n        let [last_year, last_month, last_day] = date.split('-')\r\n        let [last_hour, last_minute, last_sec] = time.split(':')\r\n        let time_list = [cur_day, cur_month, cur_year, cur_hour, cur_minute, last_year, last_month, last_day, last_hour, last_minute]\r\n        var i\r\n        for (i = 0; i < time_list.length; i++) {\r\n            time_list[i] = parseInt(time_list[i])\r\n        }\r\n        [cur_day, cur_month, cur_year, cur_hour, cur_minute, last_year, last_month, last_day, last_hour, last_minute] = time_list\r\n        if (cur_year !== last_year) {\r\n            if (cur_year - last_year === 1) {\r\n                return JSON.stringify(cur_year - last_year) + 'year ago'\r\n            } else {\r\n                return JSON.stringify(cur_year - last_year) + 'years ago'\r\n            }\r\n        }\r\n        if (cur_month !== last_month) {\r\n            if (cur_month - last_month === 1) {\r\n                return JSON.stringify(cur_month - last_month) + 'month ago'\r\n            } else {\r\n                return JSON.stringify(cur_month - last_month) + 'months ago'\r\n            }\r\n        }\r\n        if (cur_day !== last_day) {\r\n            if (cur_day - last_day === 1) {\r\n                return JSON.stringify(cur_day - last_day) + 'day ago'\r\n            } else {\r\n                return JSON.stringify(cur_day - last_day) + 'days ago'\r\n            }\r\n        }\r\n        if (cur_hour !== last_hour) {\r\n            if (cur_hour - last_hour === 1) {\r\n                return JSON.stringify(cur_hour - last_hour) + 'hour ago'\r\n            } else {\r\n                return JSON.stringify(cur_hour - last_hour) + 'hours ago'\r\n            }\r\n        }\r\n        if (cur_minute !== last_minute) {\r\n            if (cur_minute - last_minute === 1) {\r\n                return JSON.stringify(cur_minute - last_minute) + 'minute ago'\r\n            } else {\r\n                return JSON.stringify(cur_minute - last_minute) + 'minutes ago'\r\n            }\r\n        } else {\r\n            return '0 minute ago'\r\n        }\r\n    } else {\r\n        return ''\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function time_orderer(files, messages) {\r\n    const all_contents = files.concat(messages)\r\n    all_contents.sort(function (a, b) {\r\n        const a_date = new Date(a.timestamp.replace(' ', 'T'))\r\n        const b_date = new Date(b.timestamp.replace(' ', 'T'))\r\n\r\n        return a_date - b_date;\r\n      });\r\n    \r\n    return all_contents\r\n}\r\n\r\n","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Setting\\Profile.js",["251","252","253","254","255","256","257","258","259","260","261","262","263","264"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport '../assets/Setting/Profile.css'\r\nimport OneCard from '../Swipe/Card'\r\nimport { connect } from 'react-redux'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    expand: {\r\n      transform: 'rotate(0deg)',\r\n      marginLeft: 'auto',\r\n      marginRight: 'auto',\r\n      outline: 'none',\r\n      transition: theme.transitions.create('transform', {\r\n        duration: theme.transitions.duration.shortest,\r\n      }),\r\n    },\r\n    expandOpen: {\r\n      transform: 'rotate(180deg)',\r\n    },\r\n  }));\r\n  \r\n\r\nfunction Profile(props) {\r\n  const classes = useStyles();\r\n  const [expanded, setExpanded] = React.useState(false);\r\n  const handleExpandClick = () => {\r\n    setExpanded(!expanded);\r\n  };\r\n\r\n  function time() {\r\n    props.time_start || props.time_end ?\r\n    (<>{props.time_start}~{props.time_end}</>)\r\n    : (<></>)\r\n  }\r\n  console.log(props.person)\r\n\r\n  function freeday() {\r\n    var freeday = null\r\n    props.data.freeday != null ?\r\n    freeday = <>freeday: {props.data.freeday}</>\r\n    :\r\n    freeday = null\r\n    return freeday\r\n  }\r\n  \r\n\r\n  return (\r\n    <OneCard data={props.person}/>\r\n  );\r\n}\r\n\r\nconst mapstateToProps = state => {\r\n  return {\r\n    person: state.profile_reducer,\r\n    name: state.profile_reducer.name,\r\n    gender: state.profile_reducer.gender,\r\n    age: state.profile_reducer.age,\r\n    native_lan: state.profile_reducer.native_lan,\r\n    foreign_lan: state.profile_reducer.foreign_lan,\r\n    image: state.profile_reducer.image,\r\n    location: state.profile_reducer.location,\r\n    time_start: state.profile_reducer.time_start,\r\n    time_end: state.profile_reducer.time_end,\r\n    intro: state.profile_reducer.intro,\r\n    freeday: state.profile_reducer.freeday\r\n\r\n  }\r\n}\r\n\r\nexport default connect(mapstateToProps, null)(Profile)\r\n\r\n{/* <Card id='profile_root'>\r\n<CardMedia\r\n  className='media'\r\n  image= {props.image}\r\n  title= {props.name}\r\n/>\r\n<CardContent>\r\n  <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n    {props.name}\r\n  </Typography>\r\n</CardContent>\r\n<CardActions disableSpacing>\r\n  <IconButton\r\n    className={clsx(classes.expand, {\r\n      [classes.expandOpen]: expanded,\r\n    })}\r\n    onClick={handleExpandClick}\r\n    aria-expanded={expanded}\r\n    aria-label=\"show more\"\r\n    id='outline'\r\n  >\r\n    <ExpandMoreIcon />\r\n  </IconButton>\r\n</CardActions>\r\n<Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n  <CardContent>\r\n    <Typography>My native language: {props.native_lan}<br/>\r\n          I want to learn: {props.foreign_lan}<br/><br/>\r\n    </Typography>\r\n  <Typography paragraph>{freeday} {time}</Typography>\r\n    <Typography paragraph>\r\n      {props.intro}\r\n    </Typography>\r\n  </CardContent>\r\n</Collapse>\r\n</Card> */}","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Chat\\FriendCard.js",["265","266","267"],"import React from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport MobileStepper from '@material-ui/core/MobileStepper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport clsx from 'clsx';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport '../assets/Swipe/Card.css'\r\nimport '../assets/Swipe/Match.css'\r\n\r\nconst images = ['https://i.pinimg.com/originals/1f/bb/51/1fbb51e234949b8154b0f80fcff7efe3.jpg', 'https://static.billboard.com/files/media/cobie-smulders-2019-vf-u-billboard-1548-compressed.jpg']\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: 400,\r\n    flexGrow: 1,\r\n  },\r\n  header: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    height: 50,\r\n    paddingLeft: theme.spacing(4),\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  img: {\r\n    height: 475,\r\n    display: 'block',\r\n    maxWidth: 400,\r\n    overflow: 'hidden',\r\n    width: '100%',\r\n  },\r\n  expand: {\r\n    transform: 'rotate(0deg)',\r\n    marginLeft: 'auto',\r\n    marginRight: 'auto',\r\n    outline: 'none',\r\n    transition: theme.transitions.create('transform', {\r\n      duration: theme.transitions.duration.shortest,\r\n    }),\r\n  },\r\n  expandOpen: {\r\n    transform: 'rotate(180deg)',\r\n  },\r\n}));\r\n\r\nfunction OneCard(props) {\r\n  //props.onClose(false)\r\n  const classes = useStyles();\r\n  const [expanded, setExpanded] = React.useState(false);\r\n\r\n  const handleExpandClick = () => {\r\n    setExpanded(!expanded);\r\n  };\r\n\r\n  const theme = useTheme();\r\n  const [activeStep, setActiveStep] = React.useState(0);\r\n  const maxSteps = props.data.images !== undefined && props.data.images.length >0? props.data.images.length: 1\r\n\r\n  const handleNext = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n  };\r\n\r\n  const handleStepChange = (step) => {\r\n    setActiveStep(step);\r\n  };\r\n\r\n  function time() {\r\n    var time_range = null\r\n    props.data.time_start != null || props.data.time_end != null ?\r\n    time_range = <>{props.data.time_start}~{props.data.time_end}</>\r\n    :  time_range = (<></>)\r\n    return time_range\r\n}\r\n\r\n  function freeday() {\r\n    var freeday = null\r\n    props.data.freeday != null ?\r\n    freeday = <>freeday: {props.data.freeday}</>\r\n    :\r\n    freeday = null\r\n    return freeday\r\n  }\r\n\r\n  return (\r\n      <Card id='card_root'>\r\n        <div id='card_imagebox'>\r\n          <SwipeableViews\r\n            axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n            index={activeStep}\r\n            onChangeIndex={handleStepChange}\r\n            enableMouseEvents\r\n          >\r\n            {props.images === undefined?props.data.images.map((step, index) => (\r\n                <div key={props.data.name}>\r\n                  {Math.abs(activeStep - index) <= 2?(\r\n                    <img className={classes.img} src={step}/>\r\n                  ) :null }\r\n                </div>)):props.images.map((step, index) => (\r\n                <div key={props.id}>\r\n                  {Math.abs(activeStep - index) <= 2?(\r\n                    <img className={classes.img} src={step.image}/>\r\n                  ) :null }\r\n                </div>))}\r\n              </SwipeableViews>\r\n\r\n              <IconButton id='match_icon' onHover={() => props.onClose(false)}>\r\n                <ClearIcon style={{fontSize: 'large'}} onHover={() => console.log('clicked')} />\r\n              </IconButton>\r\n\r\n              <div id='card_stepper'>\r\n                  <MobileStepper\r\n                  variant=\"dots\"\r\n                  steps={maxSteps>1? maxSteps: 0 }\r\n                  position=\"static\"\r\n                  activeStep={activeStep}\r\n                  nextButton={\r\n                    <Button size=\"small\" onClick={handleNext} disabled={activeStep === maxSteps - 1} id='outline'>\r\n                      {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n                    </Button>\r\n                  }\r\n                  backButton={\r\n                    <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0} id='outline'>\r\n                      {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n                    </Button>\r\n                  }\r\n                  />\r\n              </div>\r\n        </div>\r\n\r\n      <IconButton id='match_icon' onClick={() => props.onClose(false)}>\r\n        <ClearIcon style={{fontSize: 'large'}}/>\r\n      </IconButton>\r\n      \r\n    <CardContent>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n          {props.data.name}\r\n        </Typography>\r\n      </CardContent>\r\n      <Typography style={{marginLeft: '10px'}}>native language: {props.data.native_lan}<br/>\r\n                 want to learn: {props.data.foreign_lan}<br/><br/>\r\n      </Typography>\r\n      <CardActions disableSpacing>\r\n        <IconButton\r\n          className={clsx(classes.expand, {\r\n            [classes.expandOpen]: expanded,\r\n          })}\r\n          onClick={handleExpandClick}\r\n          aria-expanded={expanded}\r\n          aria-label=\"show more\"\r\n          id='outline'\r\n        >\r\n          <ExpandMoreIcon onClick={handleExpandClick} id='outline'/>\r\n        </IconButton>\r\n      </CardActions>\r\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n        <CardContent>\r\n        <Typography paragraph>{freeday}  {time}</Typography>\r\n          <Typography className='card_intro'  paragraph>\r\n            {props.intro}\r\n          </Typography>\r\n        </CardContent>\r\n      </Collapse>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default OneCard;\r\n",["268","269"],"C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Setting\\Crop.js",["270","271","272"],"import React, {useState, useEffect} from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport ReactCrop from 'react-image-crop';\r\nimport 'react-image-crop/dist/ReactCrop.css'\r\nimport '../assets/Setting/Crop.css'\r\nimport * as image_actions from '../store/actions/image_action';\r\nimport { connect } from 'react-redux'\r\nimport { orderBy } from 'lodash';\r\nconst useStyles = makeStyles((theme) => ({\r\n  modal: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  paper: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    maxWidth: '700px',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nfunction Crop(props) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(props.open);\r\n  const [originalSize, setOriginalSize] = useState({ 'width':0, 'height':0 })\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    var img  = new Image()\r\n    img.src = props.url\r\n    img.onload = () => {\r\n      setOriginalSize({'width': img.width, 'height': img.height})\r\n    }\r\n  }, [])\r\n\r\n  const handleClose = () => {\r\n    props.parent_popup(false)\r\n    setOpen(false);\r\n  };\r\n\r\n  const image_uploader = () => {\r\n    props.parent_popup(false)\r\n    props.order.current.push(props.order.current.length)\r\n    console.log()\r\n    //props.order.current = props.order.current.push(props.order.length) \r\n    let real_x =  crop.x\r\n    let real_y = crop.y\r\n    let real_width = crop.width\r\n    let real_height = crop.height\r\n    if (originalSize.height > 600) {\r\n      real_x = crop.x * (originalSize.height / 600)\r\n      real_y = crop.y * (originalSize.height / 600)\r\n      real_width = crop.width * (originalSize.height / 600)\r\n      real_height = crop.height * (originalSize.height / 600)\r\n    } else if (originalSize.weight > 700) {\r\n      real_x = crop.x * (originalSize.height / 700)\r\n      real_y = crop.y * (originalSize.height / 700)\r\n      real_width = crop.width * (originalSize.height / 700)\r\n      real_height = crop.height * (originalSize.height / 700)\r\n    }\r\n    props.image_create(props.id, props.profile_id, props.image, real_x, real_y, real_width, real_height)\r\n    setOpen(false)\r\n  }\r\n\r\n  const [crop, setCrop] = useState({ aspect: 14 / 19 });\r\n  return (\r\n    <div className='crop'>\r\n      <Modal\r\n        aria-labelledby=\"transition-modal-title\"\r\n        aria-describedby=\"transition-modal-description\"\r\n        className={classes.modal}\r\n        open={open}\r\n        closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 500,\r\n        }}\r\n      >\r\n        <Fade in={open}>\r\n          <div className={classes.paper}>\r\n          <ReactCrop src={props.url} crop={crop} onChange={newCrop => setCrop(newCrop)} />\r\n          <div className='crop_button'>\r\n          <button className='cancel_button' onClick={handleClose} id='outline'>Cancel</button>\r\n          <button className='upload_button' onClick={image_uploader} id='outline'>Upload</button>\r\n          </div>\r\n          </div>\r\n        </Fade>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapstateToProps = state => {\r\n  return {\r\n    id: state.auth_reducer.id,\r\n    profile_id: state.profile_reducer.profile_id,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    image_create: (id, profile_id, image, x, y, width, height) => \r\n    dispatch(image_actions.image_create(id, profile_id, image, x, y, width, height))\r\n  }\r\n}\r\n\r\nexport default connect(mapstateToProps, mapDispatchToProps)(Crop)","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Video\\Video.js",["273"],"import React, {useRef, useState, useEffect} from 'react'\r\nimport '../assets/Chat/Video.css'\r\nimport createSocketConnectionInstance from './connection2'\r\nimport { connect } from 'react-redux'\r\n\r\nfunction Video(props) {\r\n    const handleDisconnect = () => {\r\n        if (socketInstance.current) socketInstance.current.destroyConnection();\r\n        props.history.push('/chatpanel')\r\n    }\r\n\r\n    let socketInstance = useRef(null);    \r\n    useEffect(() => {\r\n        startConnection();\r\n    }, []);\r\n    const startConnection = () => {\r\n        const params = {quality: 12}\r\n        socketInstance.current = createSocketConnectionInstance({\r\n            params\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n        <div id='room-container'></div>\r\n        <button onClick={handleDisconnect}>Disconnect</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state, object) => {\r\n    return {\r\n        state: state,\r\n        object: object,\r\n        quality: object.location.search.split('=')[-1]\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,null)(Video)","C:\\Users\\daisu\\WebProject\\Django-React\\chatapp\\frontend\\src\\Video\\connection2.js",[],{"ruleId":"274","replacedBy":"275"},{"ruleId":"276","replacedBy":"277"},{"ruleId":"278","severity":1,"message":"279","line":37,"column":8,"nodeType":"280","endLine":37,"endColumn":10,"suggestions":"281"},{"ruleId":"282","severity":1,"message":"283","line":231,"column":11,"nodeType":"284","messageId":"285","endLine":231,"endColumn":15},{"ruleId":"282","severity":1,"message":"286","line":10,"column":22,"nodeType":"284","messageId":"285","endLine":10,"endColumn":40},{"ruleId":"282","severity":1,"message":"287","line":16,"column":12,"nodeType":"284","messageId":"285","endLine":16,"endColumn":26},{"ruleId":"278","severity":1,"message":"279","line":29,"column":8,"nodeType":"280","endLine":29,"endColumn":10,"suggestions":"288"},{"ruleId":"282","severity":1,"message":"289","line":41,"column":11,"nodeType":"284","messageId":"285","endLine":41,"endColumn":26},{"ruleId":"282","severity":1,"message":"290","line":1,"column":38,"nodeType":"284","messageId":"285","endLine":1,"endColumn":44},{"ruleId":"278","severity":1,"message":"279","line":24,"column":8,"nodeType":"280","endLine":24,"endColumn":10,"suggestions":"291"},{"ruleId":"282","severity":1,"message":"292","line":7,"column":9,"nodeType":"284","messageId":"285","endLine":7,"endColumn":16},{"ruleId":"282","severity":1,"message":"293","line":23,"column":12,"nodeType":"284","messageId":"285","endLine":23,"endColumn":25},{"ruleId":"282","severity":1,"message":"294","line":26,"column":20,"nodeType":"284","messageId":"285","endLine":26,"endColumn":29},{"ruleId":"278","severity":1,"message":"279","line":36,"column":8,"nodeType":"280","endLine":36,"endColumn":10,"suggestions":"295"},{"ruleId":"278","severity":1,"message":"296","line":39,"column":23,"nodeType":"284","endLine":39,"endColumn":30},{"ruleId":"282","severity":1,"message":"297","line":39,"column":14,"nodeType":"284","messageId":"285","endLine":39,"endColumn":18},{"ruleId":"282","severity":1,"message":"298","line":47,"column":14,"nodeType":"284","messageId":"285","endLine":47,"endColumn":24},{"ruleId":"282","severity":1,"message":"299","line":32,"column":9,"nodeType":"284","messageId":"285","endLine":32,"endColumn":19},{"ruleId":"282","severity":1,"message":"300","line":1,"column":17,"nodeType":"284","messageId":"285","endLine":1,"endColumn":26},{"ruleId":"282","severity":1,"message":"301","line":3,"column":8,"nodeType":"284","messageId":"285","endLine":3,"endColumn":15},{"ruleId":"282","severity":1,"message":"302","line":9,"column":8,"nodeType":"284","messageId":"285","endLine":9,"endColumn":15},{"ruleId":"282","severity":1,"message":"303","line":31,"column":19,"nodeType":"284","messageId":"285","endLine":31,"endColumn":27},{"ruleId":"282","severity":1,"message":"304","line":33,"column":12,"nodeType":"284","messageId":"285","endLine":33,"endColumn":19},{"ruleId":"282","severity":1,"message":"305","line":33,"column":21,"nodeType":"284","messageId":"285","endLine":33,"endColumn":31},{"ruleId":"278","severity":1,"message":"306","line":40,"column":8,"nodeType":"280","endLine":40,"endColumn":22,"suggestions":"307"},{"ruleId":"282","severity":1,"message":"308","line":105,"column":11,"nodeType":"284","messageId":"285","endLine":105,"endColumn":18},{"ruleId":"282","severity":1,"message":"309","line":112,"column":15,"nodeType":"284","messageId":"285","endLine":112,"endColumn":18},{"ruleId":"282","severity":1,"message":"310","line":115,"column":11,"nodeType":"284","messageId":"285","endLine":115,"endColumn":21},{"ruleId":"311","severity":1,"message":"312","line":148,"column":33,"nodeType":"313","endLine":148,"endColumn":61},{"ruleId":"311","severity":1,"message":"312","line":182,"column":33,"nodeType":"313","endLine":182,"endColumn":61},{"ruleId":"311","severity":1,"message":"312","line":245,"column":75,"nodeType":"313","endLine":245,"endColumn":98},{"ruleId":"278","severity":1,"message":"314","line":19,"column":10,"nodeType":"280","endLine":19,"endColumn":12,"suggestions":"315"},{"ruleId":"282","severity":1,"message":"316","line":41,"column":17,"nodeType":"284","messageId":"285","endLine":41,"endColumn":27},{"ruleId":"282","severity":1,"message":"317","line":1,"column":5,"nodeType":"284","messageId":"285","endLine":1,"endColumn":12},{"ruleId":"311","severity":1,"message":"312","line":121,"column":17,"nodeType":"313","endLine":121,"endColumn":58},{"ruleId":"311","severity":1,"message":"312","line":126,"column":17,"nodeType":"313","endLine":126,"endColumn":64},{"ruleId":"311","severity":1,"message":"312","line":105,"column":17,"nodeType":"313","endLine":105,"endColumn":58},{"ruleId":"311","severity":1,"message":"312","line":110,"column":17,"nodeType":"313","endLine":110,"endColumn":64},{"ruleId":"282","severity":1,"message":"318","line":4,"column":10,"nodeType":"284","messageId":"285","endLine":4,"endColumn":20},{"ruleId":"282","severity":1,"message":"319","line":6,"column":10,"nodeType":"284","messageId":"285","endLine":6,"endColumn":20},{"ruleId":"282","severity":1,"message":"320","line":11,"column":13,"nodeType":"284","messageId":"285","endLine":11,"endColumn":28},{"ruleId":"282","severity":1,"message":"292","line":12,"column":10,"nodeType":"284","messageId":"285","endLine":12,"endColumn":17},{"ruleId":"282","severity":1,"message":"321","line":14,"column":9,"nodeType":"284","messageId":"285","endLine":14,"endColumn":16},{"ruleId":"282","severity":1,"message":"322","line":23,"column":14,"nodeType":"284","messageId":"285","endLine":23,"endColumn":21},{"ruleId":"278","severity":1,"message":"323","line":32,"column":8,"nodeType":"280","endLine":32,"endColumn":10,"suggestions":"324"},{"ruleId":"282","severity":1,"message":"325","line":5,"column":32,"nodeType":"284","messageId":"285","endLine":5,"endColumn":39},{"ruleId":"282","severity":1,"message":"326","line":10,"column":38,"nodeType":"284","messageId":"285","endLine":10,"endColumn":46},{"ruleId":"282","severity":1,"message":"327","line":3,"column":8,"nodeType":"284","messageId":"285","endLine":3,"endColumn":12},{"ruleId":"282","severity":1,"message":"328","line":4,"column":8,"nodeType":"284","messageId":"285","endLine":4,"endColumn":12},{"ruleId":"282","severity":1,"message":"329","line":5,"column":8,"nodeType":"284","messageId":"285","endLine":5,"endColumn":17},{"ruleId":"282","severity":1,"message":"330","line":6,"column":8,"nodeType":"284","messageId":"285","endLine":6,"endColumn":19},{"ruleId":"282","severity":1,"message":"331","line":7,"column":8,"nodeType":"284","messageId":"285","endLine":7,"endColumn":19},{"ruleId":"282","severity":1,"message":"332","line":8,"column":8,"nodeType":"284","messageId":"285","endLine":8,"endColumn":16},{"ruleId":"282","severity":1,"message":"319","line":9,"column":8,"nodeType":"284","messageId":"285","endLine":9,"endColumn":18},{"ruleId":"282","severity":1,"message":"333","line":10,"column":8,"nodeType":"284","messageId":"285","endLine":10,"endColumn":18},{"ruleId":"282","severity":1,"message":"334","line":11,"column":8,"nodeType":"284","messageId":"285","endLine":11,"endColumn":22},{"ruleId":"282","severity":1,"message":"335","line":34,"column":9,"nodeType":"284","messageId":"285","endLine":34,"endColumn":16},{"ruleId":"282","severity":1,"message":"336","line":36,"column":9,"nodeType":"284","messageId":"285","endLine":36,"endColumn":26},{"ruleId":"282","severity":1,"message":"297","line":40,"column":12,"nodeType":"284","messageId":"285","endLine":40,"endColumn":16},{"ruleId":"282","severity":1,"message":"337","line":47,"column":12,"nodeType":"284","messageId":"285","endLine":47,"endColumn":19},{"ruleId":"338","severity":1,"message":"339","line":82,"column":1,"nodeType":"340","messageId":"341","endLine":117,"endColumn":12},{"ruleId":"282","severity":1,"message":"342","line":20,"column":7,"nodeType":"284","messageId":"285","endLine":20,"endColumn":13},{"ruleId":"311","severity":1,"message":"312","line":108,"column":21,"nodeType":"313","endLine":108,"endColumn":62},{"ruleId":"311","severity":1,"message":"312","line":113,"column":21,"nodeType":"313","endLine":113,"endColumn":68},{"ruleId":"274","replacedBy":"343"},{"ruleId":"276","replacedBy":"344"},{"ruleId":"282","severity":1,"message":"345","line":11,"column":10,"nodeType":"284","messageId":"285","endLine":11,"endColumn":17},{"ruleId":"282","severity":1,"message":"299","line":31,"column":9,"nodeType":"284","messageId":"285","endLine":31,"endColumn":19},{"ruleId":"278","severity":1,"message":"346","line":41,"column":6,"nodeType":"280","endLine":41,"endColumn":8,"suggestions":"347"},{"ruleId":"282","severity":1,"message":"348","line":1,"column":24,"nodeType":"284","messageId":"285","endLine":1,"endColumn":32},"no-native-reassign",["349"],"no-negated-in-lhs",["350"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["351"],"no-unused-vars","'body' is assigned a value but never used.","Identifier","unusedVar","'requirePropFactory' is defined but never used.","'accountCreated' is assigned a value but never used.",["352"],"'loading_handler' is assigned a value but never used.","'useRef' is defined but never used.",["353"],"'connect' is defined but never used.","'lastDirection' is assigned a value but never used.","'setRipple' is assigned a value but never used.",["354"],"React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'time' is defined but never used.","'Freedayset' is defined but never used.","'handleOpen' is assigned a value but never used.","'useEffect' is defined but never used.","'Profile' is defined but never used.","'Default' is defined but never used.","'setInput' is assigned a value but never used.","'quality' is assigned a value but never used.","'setQuality' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'allContents' and 'props'. Either include them or remove the dependency array. You can also do a functional update 'setAllContents(a => ...)' if you only need 'allContents' in the 'setAllContents' call.",["355"],"'onClick' is assigned a value but never used.","'res' is assigned a value but never used.","'video_path' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'friends' and 'props.id'. Either include them or remove the dependency array. You can also do a functional update 'setFriends(f => ...)' if you only need 'friends' in the 'setFriends' call.",["356"],"'image_path' is assigned a value but never used.","'message' is assigned a value but never used.","'useGesture' is defined but never used.","'IconButton' is defined but never used.","'profile_actions' is defined but never used.","'history' is assigned a value but never used.","'onClose' is defined but never used.","React Hook useEffect has a missing dependency: 'props.friend_profile_id'. Either include it or remove the dependency array.",["357"],"'cur_sec' is assigned a value but never used.","'last_sec' is assigned a value but never used.","'clsx' is defined but never used.","'Card' is defined but never used.","'CardMedia' is defined but never used.","'CardContent' is defined but never used.","'CardActions' is defined but never used.","'Collapse' is defined but never used.","'Typography' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'classes' is assigned a value but never used.","'handleExpandClick' is assigned a value but never used.","'freeday' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'images' is assigned a value but never used.",["349"],["350"],"'orderBy' is defined but never used.","React Hook useEffect has a missing dependency: 'props.url'. Either include it or remove the dependency array.",["358"],"'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"359","fix":"360"},{"desc":"359","fix":"361"},{"desc":"359","fix":"362"},{"desc":"359","fix":"363"},{"desc":"364","fix":"365"},{"desc":"366","fix":"367"},{"desc":"368","fix":"369"},{"desc":"370","fix":"371"},"Update the dependencies array to be: [props]",{"range":"372","text":"373"},{"range":"374","text":"373"},{"range":"375","text":"373"},{"range":"376","text":"373"},"Update the dependencies array to be: [allContents, props, props.ChatID]",{"range":"377","text":"378"},"Update the dependencies array to be: [friends, props.id]",{"range":"379","text":"380"},"Update the dependencies array to be: [props.friend_profile_id]",{"range":"381","text":"382"},"Update the dependencies array to be: [props.url]",{"range":"383","text":"384"},[1337,1339],"[props]",[1180,1182],[1068,1070],[1130,1132],[1714,1728],"[allContents, props, props.ChatID]",[692,694],"[friends, props.id]",[991,993],"[props.friend_profile_id]",[1260,1262],"[props.url]"]